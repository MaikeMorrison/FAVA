[{"path":"https://maikemorrison.github.io/FAVA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 FAVA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analysis of microbiome data with FAVA","text":"FAVA R package implements statistic FAVA, FSTF_{ST}-based Assessment Variability across vectors relative Abundances, well suite helper functions enable visualization statistical analysis relative abundance data. FAVA R package package accompanies paper, “FAVA: tool quantify compositional variability microbial communities” Morrison et al. tutorial provides guide usage FAVA R package analysis microbiome data. FAVA R package includes following core functions: fava: Compute FAVA across rows relative abundance matrix plot_relabund: Visualize relative abundance matrix stacked bar plot window_fava: Compute FAVA sliding windows across rows relative abundance matrix statistic FAVA summarizes variability across rows relative abundance matrix single index ranges 0 1. typical microbiome data, rows matrix represent microbiome samples entries row represent relative abundance taxonomic category (e.g., OTU, species, genus) functional category (e.g., gene family enzyme abundance). matrices often referred “OTU tables.” Taxonomic categories usually inferred 16S metagenomic sequencing data, functional categories usually inferred metagenomic sequencing data. must obtain relative abundances sequencing data using R package FAVA. FAVA can used quantify variability many different contexts. example, row corresponds time point, FAVA represents temporal stability community. row corresponds spatial sampling location, FAVA represents spatial heterogeneity community. row corresponds replicate community assembly experiment, FAVA represents repeatability community assembly. row represents distinct individual, FAVA represents inter-individual variability microbiome composition.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"overview","dir":"Articles","previous_headings":"Introduction","what":"Overview","title":"Analysis of microbiome data with FAVA","text":"tutorial, explain data required use FAVA R package (Data specifications). analyze example data Xue et al. (Example Analysis). data set FAVA R package, visualize microbiome composition three subjects time, use FAVA quantify temporal variability across microbiome samples, explore dynamics finer resolution using sliding windows time.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"data-specifications","dir":"Articles","previous_headings":"","what":"Data specifications","title":"Analysis of microbiome data with FAVA","text":"use FAVA, data must form matrix, data frame, tibble rows corresponding samples columns corresponding categories bacterial species. metadata (e.g. sample ID, time point, subject, experimental condition, replicate, etc.) included, columns must left-hand side matrix, categories comprising composition sample (e.g., bacterial species) must right-hand side matrix. matrix contains metadata, must specify K, number categories. categories can represent many things, simplicity use “species” document refer categories comprising relative abundance sample. matrix may contain samples multiple groups like analyze separately. case, must provide name column specifying group sample belongs group parameter. example, quantify variability across samples experiment matrix pictured , specify group = \"Experiment\". can also group multiple columns providing vector column names. example, data columns var1 var2 wished group , specify group = c(\"var1\", \"var2\"). See section Compute unweighted FAVA multiple groups details.  can read data R using function read.csv. use phyloseq, can simply extract transpose (pivot) OTU table. phyloseq users may also wish join OTU table sample data table. Sample code tasks provided . may also want confirm right KK rows matrix sum 1.","code":"# Example code to read in a data set my_data = read.csv(\"Path_to/my_data.csv\")  # If your relative abundances are in a phyloseq object, # make one object combining the sample data (left-hand side) # and the OTU relative abundances (right-hand side) my_data = FAVA::relab_phyloseq(phyloseq_object)  # Confirm that your samples each sum to 1 # if columns 4 through 10 contain the relevant categories # and columns 1, 2, and 3 contain metadata rowSums(my_data[,c(4:10)])  # Example code to convert counts to relative abundances my_data[,c(4:10)] = my_data[,c(4:10)]/rowSums(my_data[,c(4:10)])"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"optional-species-similarity-matrix","dir":"Articles","previous_headings":"Data specifications","what":"Optional: species similarity matrix","title":"Analysis of microbiome data with FAVA","text":"order compute version FAVA variability statistic accounts phylogenetic similarity species, must provide phylogenetic similarity matrix, SS. matrix can generated species sequence data via four steps outlined . include example code generate similarity matrix phyloseq object. process discussed greater length supplement tutorial, Generating similarity matrix. Generate phylogenetic tree describing relationships among species present samples. many platforms analysis, workflow using DADA2. Convert phylogenetic tree distance matrix. Phylogenetic tree objects can easily converted distance matrices using functions cophenetic.phylo ape R package. DD phylogenetic distance matrix, entry Di,jD_{,j} represents phylogenetic distance species ii species jj. Convert phylogenetic distance matrix similarity matrix. Whereas distance two identical species 0, similarity two identical species 1. therefore use simple transformation convert distance species ii jj, Di,jD_{,j}, similarity species ii jj, Si,jS_{,j}, mapping distances 0 similarities 1. example analysis tutorial accompanying paper, use transformation Si,j=exp(−Di,j)S_{,j}=\\exp(-D_{,j}). transformations, Si,j=1Di,j+1S_{,j}=\\frac{1}{D_{,j}+1} Si,j=1−Di,jmax(Di,j)S_{,j}=1-\\frac{D_{,j}}{\\max{(D_{,j})}}, also suitable result different mean similarity across species. choice transformation discussed length supplement tutorial, Generating similarity matrix. Ensure order identity species similarity matrix match order identity species relative abundance matrix. generated properly formatted relative abundance matrix, possibly species similarity matrix well, ’s time use FAVA!","code":"# (1) # Here, we assume that you have already generated a phylogenetic tree # and that it is a part of your phyloseq object. tree = phy_tree(phyloseq_object)  # (2) distance_matrix = ape::cophenetic.phylo(tree)  # (3) # alternative similarity matrices: similarity_matrix = 1/(distance_matrix + 1) similarity_matrix = 1 - distance_matrix/max(distance_matrix)  # the similarity matrix we use: similarity_matrix = exp(-distance_matrix)   # (4) # Get the names of the species in your relative abundance matrix species_order = colnames(my_data[,c(4:10)])  # Confirm that the entries of the similarity matrix # correspond to relative abundance matrix all(species_order == colnames(similarity_matrix)) all(species_order == rownames(similarity_matrix))  # If they do not, you can re-order the rows and columns of # your similarity matrix to match your data: similarity_matrix_reordered = similarity_matrix[species_order, species_order]  # confirm that all diagonal elements are still 1 diag(similarity_matrix_reordered)"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"example-analysis","dir":"Articles","previous_headings":"","what":"Example analysis","title":"Analysis of microbiome data with FAVA","text":"guide application FAVA microbiome data, demonstrate package’s core functions using example data generated Xue et al. (2024). data set contains time series microbiome samples three human subjects took antibiotic midway study period (0 - Example data). first visualize composition subject’s microbiome communities time (1 - Visualize relative abundances). subject, next compute total variability across study period (2 - Compute unweighted FAVA 3 - Compute weighted FAVA). also estimate uncertainty variability measures, allows us perform statistical comparisons subject’s temporal microbiome variability (4 - Bootstrapping). Finally, explore compositional variability changes time using sliding window analysis (5 - Sliding windows).","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"example-data","dir":"Articles","previous_headings":"Example analysis","what":"0 - Example data","title":"Analysis of microbiome data with FAVA","text":"tutorial, analyze longitudinal microbiome composition data generated Xue et al. (2024), data also analyzed paper Morrison et al. example analyses, subset data provided name xue_microbiome_sample FAVA R package. xue_microbiome_sample contains relative abundances bacterial species samples three subjects: XBA, XDA, XMA. subject collected weekly samples four weeks three week window daily sampling, middle contained one-week antibiotic course (depicted ; dots correspond sampling days, yellow dots correspond sampling days coinciding antibiotic). row xue_microbiome_sample represents single microbiome sample. xue_microbiome_sample 526 columns: subject: subject sample corresponds timepoint: study day sample collected Actinomyces_sp_58647, …, Xenorhabdus_bovienii_57960: relative abundance corresponding bacterial species (524 species total) can explore structure data using following functions: heat map plot similarity matrix: Note : diagonal elements matrix 1, since species identical columns rows order (.e., column 1 corresponds species row 1, etc.) ordering species similarity matrix, xue_species_similarity, matches ordering relative abundance matrix, xue_microbiome_sample.","code":"# open the data set in a new window View(xue_microbiome_sample)  # view the structure of the data set str(xue_microbiome_sample)"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"visualize-relative-abundances","dir":"Articles","previous_headings":"Example analysis","what":"1 - Visualize relative abundances","title":"Analysis of microbiome data with FAVA","text":"order visualize community composition microbiome sample subject, generate stacked bar plot using plot_relabund function FAVA. plot_relabund returns ggplot2 object, resulting plot can customized using functions ggplot2.  example data set contains relative abundance samples multiple subjects taken uneven time points. account properties specifying column name describes group sample belongs (group = \"subject\") well sampling day sample corresponds (time= \"timepoint\"). Providing group parameter results plot one facet group. Providing time parameter results plot sample may repeated multiple times reflect number days informs composition. Since sampling scheme (depicted 0 - Example data) includes weekly samples beginning end study daily samples middle, bars narrower near middle plot. Consider reference plot time parameter specified, thus includes sample exactly .  Consider also plot specifies neither time group instead plots samples single plot.  plots, specified arrange = \"vertical\", vertically arranges species bottom top order decreasing abundance. Specifying arrange=\"horizontal\" horizontally arranges samples left right order increasing abundance abundant species. Specifying arrange=TRUE arrange=\"\" results plot types ordering. arrange=\"\" useful option highlighting patterns horizontal ordering samples correspond meaningful property data, sampling time.","code":"# Make a color palette for all 524 species set.seed(1) species_palette = viridis::turbo(524)[sample(1:524)] %>%   `names<-`(colnames(xue_microbiome_sample)[-c(1:2)])  # Make a ggplot2 stacked bar plot plot_relabund(xue_microbiome_sample,               group = \"subject\",               time = \"timepoint\",               arrange = \"vertical\",               K = 524) + # Specify a custom color scheme   ggplot2::scale_color_manual(values = species_palette) +   ggplot2::scale_fill_manual(values = species_palette) plot_relabund(xue_microbiome_sample,               group = \"subject\",               arrange = \"vertical\",               K = 524) +   ggplot2::scale_color_manual(values = species_palette) +   ggplot2::scale_fill_manual(values = species_palette) plot_relabund(xue_microbiome_sample,               arrange = \"vertical\",               K = 524) +   ggplot2::scale_color_manual(values = species_palette) +   ggplot2::scale_fill_manual(values = species_palette) plot_relabund(xue_microbiome_sample,               arrange = \"both\",               K = 524) +   ggplot2::scale_color_manual(values = species_palette) +   ggplot2::scale_fill_manual(values = species_palette)"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"compute-unweighted-fava","dir":"Articles","previous_headings":"Example analysis","what":"2 - Compute unweighted FAVA","title":"Analysis of microbiome data with FAVA","text":"primary goal FAVA R package compute statistic FAVA, measure variability across many relative abundance vectors, introduced paper Morrison et al. statistic computed using function fava, takes relative abundance matrix (relab_matrix) computes variability across rows , returning single index 0 1. relative abundance matrix contains metadata addition relative abundances, number species, K, must also specified. matrix contains multiple groups wish separately analyze, must also specify name matrix column specifying group membership using group parameter. example, column called “subject”. code computes FAVA across samples subject. group specified, FAVA computed across samples matrix. example, measure variability across time subjects. number samples/rows relative abundance matrix small, may wish normalize FAVA theoretical upper bound FAVA conditional number samples/rows abundance abundant taxon. Compute normalized FAVA specifying normalized = TRUE (see ). Refer supplemental section normalize FAVA information.","code":"fava(relab_matrix = xue_microbiome_sample,      group = \"subject\",      K = 524) #>   subject       FAVA #> 1     XBA 0.15335493 #> 2     XDA 0.10891778 #> 3     XMA 0.09997127 fava(relab_matrix = xue_microbiome_sample,      K = 524) #> [1] 0.1666177 fava(relab_matrix = xue_microbiome_sample,      group = \"subject\",      K = 524,       normalized = TRUE) #>   subject      FAVA #> 1     XBA 0.1564204 #> 2     XDA 0.1092958 #> 3     XMA 0.1012432"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"compute-unweighted-fava-with-multiple-groups","dir":"Articles","previous_headings":"Example analysis > 2 - Compute unweighted FAVA","what":"Compute unweighted FAVA with multiple groups","title":"Analysis of microbiome data with FAVA","text":"relative abundance matrix contains multiple categories wish group , vector column names can provided group parameter. example, suppose want separately compute FAVA across samples subject taken antibiotic perturbation, occurred days 29 34. First, make new column, called Antibiotic, states whether sample , , antibiotic perturbation. important column added left relative abundances. Second, remove samples antibiotic perturbation: Lastly, compute FAVA specifying subject Antibiotic groups:","code":"antibiotic_data = xue_microbiome_sample %>%   mutate(Antibiotic = ifelse(timepoint < 29, \"Before\",                               ifelse(timepoint <35, \"During\", \"After\")),          .after = timepoint) antibiotic_data = antibiotic_data %>% filter(Antibiotic != \"During\") fava(relab_matrix = antibiotic_data,      group = c(\"subject\", \"Antibiotic\"),      K = 524) #> # A tibble: 6 × 4 #>   subject Antibiotic grouping_var_multiple   FAVA #>   <chr>   <chr>      <chr>                  <dbl> #> 1 XBA     Before     XBA_Before            0.0144 #> 2 XBA     After      XBA_After             0.0944 #> 3 XDA     Before     XDA_Before            0.0184 #> 4 XDA     After      XDA_After             0.0317 #> 5 XMA     Before     XMA_Before            0.0128 #> 6 XMA     After      XMA_After             0.0317"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"compute-weighted-fava","dir":"Articles","previous_headings":"Example analysis","what":"3 - Compute weighted FAVA","title":"Analysis of microbiome data with FAVA","text":"statistic FAVA can weighted two possible ways: Providing species similarity matrix S allows FAVA account similarity among taxa. Providing weighting vector w, name column corresponding sampling times (can converted weighting vector according equations 5 6 Morrison et al.), allows FAVA assign non-uniform weights samples. (1) , provide phylogenetic similarity matrix (S = xue_species_similarity) FAVA computation can account varying levels similarity species data. (2) data set corresponds time series data, example , providing name matrix column specifies time sample collected allows FAVA compute weighting vector based sampling times implement weighting vector computation. xue_microbiome_sample, column called “time point.” arbitrary weighting vector can instead provided fava function w parameter. may provide either w time . w must length equal number rows data set. w provides weights one computation FAVA (.e., single group) entries must sum 1. w provides weights multiple groups, subset w corresponding single group must sum 1. can manually compute w vector vector sampling times using function time_weights used fava time specified. example, consider subject XMA. first create data frame, XMA, containing samples subject XMA. compute weighting vector based times subject XMA collected samples, XBA$timepoint. plot sample’s weight based sample collected, see daily samples middle study period lower weights weekly samples beginning end study. see subject missed day sampling middle study, samples missed day slightly higher weights daily samples.  can use weighting vector compute temporal variability subject XMA. Note get value FAVA specified time parameter . may incorporate species similarity (specifying S) uneven row weightings (specifying w time) computation FAVA.  specify S time analysis data set contains many species, similar distantly related, sampling scheme uneven, containing weekly samples daily samples.","code":"fava(relab_matrix = xue_microbiome_sample,      group = \"subject\",      K = 524,      S = xue_species_similarity) #>   subject       FAVA #> 1     XBA 0.11090489 #> 2     XDA 0.12424577 #> 3     XMA 0.05669292 fava(relab_matrix = xue_microbiome_sample,      group = \"subject\",      K = 524,      time = \"timepoint\") #>   subject       FAVA #> 1     XBA 0.14494815 #> 2     XDA 0.10834448 #> 3     XMA 0.07088044 XMA = filter(xue_microbiome_sample, subject == \"XMA\") XMA$timepoint #>  [1]  1  8 15 22 23 24 25 26 27 28 29 30 31 32 34 35 36 37 38 39 40 43 50 57 64  weights = time_weights(times = XMA$timepoint) weights #>  [1] 0.05555556 0.11111111 0.11111111 0.06349206 0.01587302 0.01587302 #>  [7] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 #> [13] 0.01587302 0.02380952 0.02380952 0.01587302 0.01587302 0.01587302 #> [19] 0.01587302 0.01587302 0.03174603 0.07936508 0.11111111 0.11111111 #> [25] 0.05555556 sum(weights) #> [1] 1 ggplot(mapping = aes(x = XMA$timepoint,                      y = weights)) +   geom_bar(stat = \"identity\") +   theme_bw() +   xlab(\"Study day\") +   ylab(\"Weight\") fava(relab_matrix = XMA,      K = 524,      w = weights) #> [1] 0.07088044  fava(relab_matrix = XMA,      K = 524,      time = \"timepoint\") #> [1] 0.07088044 fava_out = fava(relab_matrix = xue_microbiome_sample,      group = \"subject\",      K = 524,      time = \"timepoint\",      S = xue_species_similarity)  fava_out #>   subject       FAVA #> 1     XBA 0.11298430 #> 2     XDA 0.13109618 #> 3     XMA 0.04612452  ggplot(fava_out, aes(x = subject, y = FAVA)) + geom_point(size = 4) + theme_bw()"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"bootstrapping","dir":"Articles","previous_headings":"Example analysis","what":"4 - Bootstrapping","title":"Analysis of microbiome data with FAVA","text":"preceding computation suggested subject XDA temporally variable microbiome across entire study period, subject XMA much lower variability either XDA XBA. determine differences variability levels statistically significant, employ bootstrapping, computational method used generate null distribution test statistical hypotheses. example, compare subject XDA, n=24n=24 samples, subject XMA, m=25m=25 samples. Bootstrapping proceeds following steps: Merge two relative abundance matrices generate single matrix n+mn + m samples. Draw nn samples replacement merged matrix. generates bootstrap replicate subject XDA. Compute FAVA matrix. Draw mm samples replacement merged matrix generate bootstrap replicate XMA. Compute FAVA matrix. Compute difference values FAVA steps 3 4. Repeat steps 2-4 many times generate many bootstrapped differences FAVA values XDA XMA null hypothesis true difference distribution generating samples. Compare true difference FAVA values XDA XMA distribution bootstrapped differences. fraction bootstrap replicate differences whose absolute values greater absolute value true value two-sided P-value statistical test. One-sided tests performed computing fraction differences greater less true value. procedure implemented function bootstrap_fava, can conduct many pairwise comparisons. example, generate 100 bootstrap replicates (n_replicates = 100) difference FAVA values pair subjects (group = \"subject\") relative abundance matrix (relab_matrix = xue_microbiome_sample). weight FAVA computation sampling times (time = \"timepoint\") species similarity (S = xue_species_similarity). bootstrapping random process, running code multiple times give slightly different results. Setting random seed (seed = 3) makes result repeatable. specify save_replicates = FALSE bootstrap_fava save 600 replicate matrices (100 per matrix 3 pairs matrices compared: XBA - XDA, XBA - XMA, XDA - XMA), make resulting object quite large. wish perform one-sided statistical test, can specify alternative = \"lesser\" alternative = \"greater\"; default value alternative = \"two.sided\". resulting list, named bootstrap_out, includes matrix p-values pairwise comparison (P_values) plot (bootstrap_distribution_plot) showing pair matrices bootstrap distribution differences FAVA values (black dots) compared true difference (red dot). bootstrap statistical test fails find significant difference FAVA values subjects XBA XDA (one-sided P=0.6P=0.6). However, significant differences FAVA values XBA XMA (one-sided P=0.08P=0.08) XDA XMA (one-sided P<0.01P<0.01, suggests none 100 replicate differences greater true difference). can visualize bootstrap distribution pairwise differences FAVA values compares true differences pair following plot:  can see true difference FAVA XBA XDA (red dot, left panel) falls near center bootstrap distribution, suggesting observed difference unlikely null model differences XBA XDA. However, two panels show observed FAVA differences (red dots) center distribution, suggesting true differences pairs subjects.","code":"bootstrap_out = bootstrap_fava(relab_matrix = xue_microbiome_sample,                                n_replicates = 100,                                seed = 3,                                group = \"subject\",                                K = 524,                                # time = \"timepoint\",                                S = xue_species_similarity) str(bootstrap_out, max.level = 1) #> List of 4 #>  $ P_values                   :'data.frame': 3 obs. of  3 variables: #>  $ bootstrap_distribution_plot:List of 11 #>   ..- attr(*, \"class\")= chr [1:2] \"gg\" \"ggplot\" #>  $ observed_difference        :'data.frame': 3 obs. of  2 variables: #>  $ bootstrap_difference       : tibble [300 × 2] (S3: tbl_df/tbl/data.frame)  bootstrap_out$P_values #>   Comparison P_value P_value_numeric #> 1  XBA - XDA     0.6            0.60 #> 2  XBA - XMA    0.08            0.08 #> 3  XDA - XMA   <0.01            0.00 bootstrap_out$bootstrap_distribution_plot"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"sliding-windows","dir":"Articles","previous_headings":"Example analysis","what":"5 - Sliding windows","title":"Analysis of microbiome data with FAVA","text":"Finally, order explore temporal variability changes course study period subject, compute FAVA sliding windows. use sliding windows 6-samples wide separated 1-sample increments, values can customized using window_size window_step parameters. Like bootstrap_fava, function window_fava returns list objects. window_fava$window_data data frame containing value FAVA sliding window. window_fava$window_plot plots value FAVA window horizontal line segment length corresponding samples included vertical position determined window’s FAVA value.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"compute-fava-for-each-window","dir":"Articles","previous_headings":"Example analysis > 5 - Sliding windows","what":"Compute FAVA for each window","title":"Analysis of microbiome data with FAVA","text":"","code":"window_out = window_fava(relab_matrix = xue_microbiome_sample,                          window_size = 6, window_step = 1,                          K = 524,                          time = \"timepoint\",                          S = xue_species_similarity,                          group = \"subject\") head(window_out$window_data) #> # A tibble: 6 × 9 #>   group    FAVA window_index    w1    w2    w3    w4    w5    w6 #>   <chr>   <dbl>        <int> <int> <int> <int> <int> <int> <int> #> 1 XBA   0.0128             1     1     8    15    22    23    24 #> 2 XBA   0.0117             2     8    15    22    23    24    25 #> 3 XBA   0.0127             3    15    22    23    24    25    26 #> 4 XBA   0.00998            4    22    23    24    25    26    27 #> 5 XBA   0.00913            5    23    24    25    26    27    28 #> 6 XBA   0.0114             6    24    25    26    27    28    29"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"visualize-fava-in-sliding-windows","dir":"Articles","previous_headings":"Example analysis > 5 - Sliding windows","what":"Visualize FAVA in sliding windows","title":"Analysis of microbiome data with FAVA","text":"see subject experiences increase variability taking antibiotic. subjects XDA XMA return FAVA values similar pre-antibiotic values, subject XBA re-stabilize study period.","code":"window_out$window_plot window_out$window_plot +   ggplot2::facet_wrap(~ group)"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Analysis of microbiome data with FAVA","text":"concludes tutorial application FAVA R package analysis microbiome data. hope found helpful! guidance specific functions, access documentation typing ? R console (e.g., ?fava). see available functions, type ?FAVA::. details FAVA statistic, see paper Morrison et al.","code":""},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"generating-a-similarity-matrix","dir":"Articles","previous_headings":"Supplemental materials","what":"Generating a similarity matrix","title":"Analysis of microbiome data with FAVA","text":"section, provide detail generate similarity matrix phylogenetic tree. proceed three steps: Convert phylogenetic tree pairwise phylogenetic distance matrix Explore different transformations can used convert distance matrix similarity matrix Explore choice transformation influences results FAVA example data","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"convert-a-phylogenetic-tree-to-a-pairwise-phylogenetic-distance-matrix","dir":"Articles","previous_headings":"Supplemental materials > Generating a similarity matrix","what":"(1) Convert a phylogenetic tree to a pairwise phylogenetic distance matrix","title":"Analysis of microbiome data with FAVA","text":"begin phylogenetic tree, xue_species_tree, describes evolutionary relationships among species based sequence data. R, tree stored list describing nodes, edges, tips phylogenetic tree: R package ape contains many functions manipulating phylogenetic trees. example, visualize tree function plot.phylo.  transform tree distance matrix using function cophenetic.phylo, computes distance pair species using branch lengths phylogenetic tree. moving , need make rows columns distance_matrix match relative abundance matrix xue_microbiome_sample. heat map plot distance matrix: summary pairwise distances matrix:","code":"str(xue_species_tree) #> List of 5 #>  $ edge       : int [1:1046, 1:2] 525 525 526 526 527 528 528 529 530 530 ... #>  $ edge.length: num [1:1046] 0.00301 0.00115 0.00654 0.00085 0.00099 ... #>  $ Nnode      : int 523 #>  $ node.label : chr [1:523] \"OROOT\" \"0.578\" \"0.253\" \"0.865\" ... #>  $ tip.label  : chr [1:524] \"Enterobacter_cloacae_57303\" \"Enterobacter_cloacae_55011\" \"Enterobacter_cloacae_60571\" \"Enterobacter_cancerogenus_61658\" ... #>  - attr(*, \"class\")= chr \"phylo\" #>  - attr(*, \"order\")= chr \"cladewise\" ape::plot.phylo(xue_species_tree, cex = 0.2) distance_matrix = ape::cophenetic.phylo(xue_species_tree) str(distance_matrix) #>  num [1:524, 1:524] 0 0.0107 0.0157 0.0247 0.0226 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:524] \"Enterobacter_cloacae_57303\" \"Enterobacter_cloacae_55011\" \"Enterobacter_cloacae_60571\" \"Enterobacter_cancerogenus_61658\" ... #>   ..$ : chr [1:524] \"Enterobacter_cloacae_57303\" \"Enterobacter_cloacae_55011\" \"Enterobacter_cloacae_60571\" \"Enterobacter_cancerogenus_61658\" ... species_order = colnames(xue_microbiome_sample)[-c(1:2)] distance_matrix = distance_matrix[species_order, species_order] str(distance_matrix) #>  num [1:524, 1:524] 0 0.00756 0.08838 2.71274 2.88126 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:524] \"Actinomyces_sp_58647\" \"Actinomyces_sp_59161\" \"Actinomyces_sp_59944\" \"Aggregatibacter_aphrophilus_58143\" ... #>   ..$ : chr [1:524] \"Actinomyces_sp_58647\" \"Actinomyces_sp_59161\" \"Actinomyces_sp_59944\" \"Aggregatibacter_aphrophilus_58143\" ... summary(c(distance_matrix)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   0.000   2.298   2.612   2.397   2.858   3.736"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"convert-a-pairwise-phylogenetic-distance-matrix-to-a-pairwise-similarity-matrix","dir":"Articles","previous_headings":"Supplemental materials > Generating a similarity matrix","what":"(2) Convert a pairwise phylogenetic distance matrix to a pairwise similarity matrix","title":"Analysis of microbiome data with FAVA","text":"Next, explore three transformations convert phylogenetic distance species ii jj, Di,jD_{,j}, similarity species ii jj, Si,jS_{,j}. transformation must map distances 0 similarities 1, large distances small similarities. many possible transformations, consider following three: Difference: Si,j=1−Di,jmax(Di,j)S_{,j}=1-\\frac{D_{,j}}{\\max{(D_{,j})}} Exponential: Si,j=e−Di,jS_{,j}=e^{-D_{,j}} Inverse: Si,j=1Di,j+1S_{,j}=\\frac{1}{D_{,j}+1} three transformations plotted maximum pairwise distance example data, approximately 3.7 (max(Di,j)≈3.7)(\\max{(D_{,j})}\\approx 3.7). see density plot summary end preceding section phylogenetic distance species 2 3. region, exponential transformation yields much lower similarities either difference inverse similarities. Note relative shapes transformations changes max(Di,j)\\max{(D_{,j})} increases. Consider plot, max(Di,j)=100\\max{(D_{,j})}=100. code transformation quite simple: transformations result different pairwise similarity matrices. , visualize summarize matrices : . Plotting three similarity matrices heat map, pairwise similarity colored scale 0 (dark purple) 1 (bright yellow). Notice consistent yellow diagonal plot, confirming species similarity 1 , regardless transformation. b. Plotting distribution pairwise similarity values (entries matrix) transformation. c. Computing summary statistics (minimum, first quartile, median, mean, third quartile, maximum) across pairwise similarities transformation. () Heat maps  (b) Distributions pairwise similarities species transformation (c) Summary statistics summaries illuminate important differences among transformations. difference transformation generally results high pairwise similarities. heat map () dominated turquoise (values 0.25 0.5), bands purple (groups species low similarity species) blocks yellow (groups species high similarity one another). distribution pairwise similarities (b) broad peak 0.2 0.4, heavy tail (.e., high similarity values fairly abundant). mean similarity species scale 0 1 (c) 0.36. exponential transformation generally results low pairwise similarities. heat map () dominated dark purple (similarity values close 0), except small blocks high similarity, corresponding closely related species. distribution pairwise similarities (b) narrow peak 0 0.1. mean similarity species scale 0 1 (c) just 0.14. inverse transformation similar difference distribution range phylogenetic distances present data set (Di,j∈[0,3.7]D_{,j}\\[0,3.7]), transformation similar exponential distribution maximum phylogenetic distance (max(Di,j)\\max{(D_{,j})}) larger (e.g., see plot transformation functions max(Di,j)=100\\max{(D_{,j})}=100). distribution pairwise similarities (b) narrow peak like exponential transformation, center around 0.3 like difference transformation. shift also reflected large mean similarity value 0.32, similar difference transformation (c). choice transformation depends desired distribution pairwise similarities: Use difference transformation want account relatedness distantly related species addition closely related species. transformation also transformations linear, shape distribution similarities (b) just mirror image distribution pairwise distances (first plot sub-section). also transformation whose distribution similarities change maximum phylogenetic distance (max(Di,j)\\max{(D_{,j})}). Use exponential transformation want closely related species treated similar. Use inverse transformation want intermediate difference exponential transformations, though note shape depends value max(Di,j)\\max{(D_{,j})}. example analysis tutorial accompanying paper, use exponential transformation wish account similarities among closely related species. However, decision informed biological processes play data, choices may suitable different data sets.","code":"difference_similarity = 1 - distance_matrix/max(distance_matrix)  exponential_similarity = exp(-distance_matrix)  inverse_similarity = 1/(distance_matrix + 1) summary(c(difference_similarity)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.0000  0.2352  0.3010  0.3583  0.3850  1.0000 summary(c(exponential_similarity)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.02384 0.05740 0.07341 0.13890 0.10048 1.00000 summary(c(inverse_similarity)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.2111  0.2592  0.2769  0.3247  0.3032  1.0000"},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"how-do-these-transformations-influence-the-value-of-fava","dir":"Articles","previous_headings":"Supplemental materials > Generating a similarity matrix","what":"(3) How do these transformations influence the value of FAVA?","title":"Analysis of microbiome data with FAVA","text":"first compute FAVA across samples subject using three different similarity matrices (difference, exponential, inverse). calculations, weight samples based sampling time.  find exponential inverse transformations yield similar results. difference transformation, hand, yields FAVA values much lower transformations subject XDA XMA, though XBA. next repeat sliding window analysis three transformations.  find results across transformations qualitatively , despite small differences. Regardless transformation used generate similarity matrix, XBA highest peak variability stabilize, XDA XMA stabilize FAVA values similar initial values. order easily compare three transformations, plot sliding window point, location along x-axis corresponding center sliding window.  find relative ordering FAVA values three transformations depends subject window time relative antibiotic. windows overlapping antibiotic period (grey rectangle), FAVA values generated difference-transformed similarity matrix different generated two transformations—greater subject XBA, smaller subjects XDA XMA. windows far antibiotic window, results transformation similar.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"when-to-normalize-fava","dir":"Articles","previous_headings":"Supplemental materials","what":"When to normalize FAVA","title":"Analysis of microbiome data with FAVA","text":"Recall FAVA uses population-genetic statistic FSTF_{ST} quantify variability across many samples microbial community composition. FST=0F_{ST}=0 every sample identical FST=1F_{ST}=1 sample comprised entirely single taxon least two distinct taxa present across samples. section, explore FSTF_{ST} constrained sample size small, can account constraint normalizing FSTF_{ST} theoretical upper bound conditional sample size, II, mean abundance abundant taxon, MM. short, wish compare variability relative abundance matrices rows/samples () different mean abundances dominant taxon (M), may wish normalize FSTF_{ST} theoretical upper bound order avoid variability differences driven difference M.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"when-i-is-small-which-relative-abundance-matrices-have-f_st1","dir":"Articles","previous_headings":"Supplemental materials > When to normalize FAVA","what":"When II is small, which relative abundance matrices have FST=1F_{ST}=1?","title":"Analysis of microbiome data with FAVA","text":"relative abundance matrix just two samples (=2I=2), FSTF_{ST} can reach upper bound 11 sample entirely comprised different species:  case, mean abundance abundant species across samples M=12M=\\frac{1}{2}. suggests , two samples (=2I=2), FSTF_{ST} can equal 11 M=12M=\\frac{1}{2}. relative abundance matrix three samples (=3I=3), two relative abundance matrices reach FST=1F_{ST}=1: Matrix , sample comprised distinct taxon Matrix B, two samples comprised taxon one comprised different taxon   , mean abundance abundant taxon across three samples either M=13M=\\frac{1}{3} (Matrix ) M=23M=\\frac{2}{3} (Matrix B). follows , =3I=3, FSTF_{ST} can equal 11 M=13M=\\frac{1}{3} 23\\frac{2}{3}. values MM, maximum possible value FSTF_{ST} less 11.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"in-general-what-is-the-upper-bound-on-f_st-conditional-on-m-and-i","dir":"Articles","previous_headings":"Supplemental materials > When to normalize FAVA","what":"In general, what is the upper bound on FSTF_{ST} conditional on MM and II?","title":"Analysis of microbiome data with FAVA","text":"Previous work derived general equation upper bound FSTF_{ST} function number samples (II) abundance abundant taxon (MM) (Alcala & Rosenberg 2022). can divide FSTF_{ST} upper bound order generate variability statistic, FST/FSTmaxF_{ST}/F_{ST}^{max}, ranges 0 1 matter value MM . previous project, used FST/FSTmaxF_{ST}/F_{ST}^{max} instead FSTF_{ST} didn’t want results confounded differences MM (Morrison, Alcala, & Rosenberg 2022). plot upper bound FSTF_{ST} function MM different values II .  Note , expect preceding examples, =2I=2, FSTmax=1F_{ST}^{max}=1 M=12M=\\frac{1}{2} , =3I=3, FSTmax=1F_{ST}^{max}=1 M=13M=\\frac{1}{3} 23\\frac{2}{3}. general, FSTF_{ST} constrained MM sample size, II, small. regions upper bound FSTF_{ST} much less 11, value MM big influence value FSTF_{ST}. can therefore difficult compare two relative abundance matrices small sample sizes different values MM. situation, difference values FSTF_{ST} driven mainly different bounds FSTF_{ST} function MM. reason, may wish normalize FSTF_{ST} upper bound making comparison.","code":""},{"path":"https://maikemorrison.github.io/FAVA/articles/microbiome_tutorial.html","id":"example","dir":"Articles","previous_headings":"Supplemental materials > When to normalize FAVA","what":"Example","title":"Analysis of microbiome data with FAVA","text":"Consider following two matrices:  FSTF_{ST} matrix C almost twice matrix D: However, matrix C frequency abundant taxon close 23\\frac{2}{3}, frequency D’s abundant taxon much higher: matrices C D just =3I=3 samples, mean abundance abundant species, MM, influences maximum value FSTF_{ST} attain. Matrix C value MM allows value FSTF_{ST} close 1, matrix D constrained smaller FSTF_{ST} values:  length colored vertical bar represents value FSTmaxF_{ST}^{max} matrix. Since much closer 1 C D, value FSTF_{ST} matrix C less influenced normalization. Indeed, divide matrix’s value FSTF_{ST} upper bound conditional MM II, find D larger value FST/FSTmaxF_{ST}/F_{ST}^{max} matrix C. change suggests difference variability matrices C D heavily influenced difference abundance dominant taxa.","code":"fava(C) #> [1] 0.1776815 fava(D) #> [1] 0.09185804 max(colMeans(C)) #> [1] 0.65 max(colMeans(D)) #> [1] 0.85 fava(C, normalized = TRUE) #> [1] 0.1906327 fava(D, normalized = TRUE) #> [1] 0.2602644"},{"path":"https://maikemorrison.github.io/FAVA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maike Morrison. Author, maintainer.","code":""},{"path":"https://maikemorrison.github.io/FAVA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morrison M (2024). FAVA: FST-Based Assessment Variability across Vectors Relative Abundances. R package version 1.0.0, https://maikemorrison.github.io/FAVA/, https://github.com/MaikeMorrison/FAVA.","code":"@Manual{,   title = {FAVA: An FST-Based Assessment of Variability across Vectors of Relative Abundances},   author = {Maike Morrison},   year = {2024},   note = {R package version 1.0.0, https://maikemorrison.github.io/FAVA/},   url = {https://github.com/MaikeMorrison/FAVA}, }"},{"path":"https://maikemorrison.github.io/FAVA/index.html","id":"fava-","dir":"","previous_headings":"","what":"An FST-Based Assessment of Variability across Vectors of Relative Abundances","title":"An FST-Based Assessment of Variability across Vectors of Relative Abundances","text":"FAVA R package implements statistic FAVA, FSTF_{ST}-based Assessment Variability across vectors relative Abundances, well suite helper functions enable visualization statistical analysis relative abundance data. FAVA R package accompanies paper, “Quantifying compositional variability microbial communities FAVA” Morrison et al. FAVA R package includes following core functions: fava: Quantify variability across many compositional vectors single, normalized index, called FAVA bootstrap_fava: Compare values FAVA pairs abundance matrices window_fava: Compute FAVA sliding windows along rows relative abundance matrix plot_relabund: Visualize relative abundance matrix stacked bar plot","code":""},{"path":"https://maikemorrison.github.io/FAVA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An FST-Based Assessment of Variability across Vectors of Relative Abundances","text":"can install FAVA GitHub :","code":"# First, install devtools if you haven't already: # install.packages(\"devtools\")  devtools::install_github(\"MaikeMorrison/FAVA\")  # If you wish to access the tutorial (also accessible below) from within # the package:  devtools::install_github(\"MaikeMorrison/FAVA\", build_vignettes = TRUE)"},{"path":"https://maikemorrison.github.io/FAVA/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"An FST-Based Assessment of Variability across Vectors of Relative Abundances","text":"tutorial usage FAVA focus analysis compositional data representing microbiome samples available microbiome_tutorial vignette, available link via following code package installation.","code":"vignette(\"microbiome_tutorial\", package = \"FAVA\")"},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"bootstrap_fava uses bootstrapping statistically compare FAVA values pairs relative abundance matrices. bootstrap_fava takes options fava, , fava, can separately analyze multiple populations groups samples (specify group), account similarity among categories (specify S) uneven weighting rows (specify w time). bootstrap_fava follows bootstrapping procedure defined Efron Tibshirani (1993). Details bootstrapping procedure available Methods section accompanying paper.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"","code":"bootstrap_fava(   relab_matrix,   n_replicates = 1000,   group,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   normalized = FALSE,   seed = NULL,   alternative = \"two.sided\" )"},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. n_replicates number bootstrap replicate matrices generate. Default n_replicates = 1000. group string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equaling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. normalized Optional; normalized FAVA used? Default normalized = FALSE; use normalized = TRUE compute normalized FAVA. FAVA can normalized weighted. seed Optional; integer used random seed simulations. alternative Optional; want one- two.sided test? Default alternative = \"two.sided\". wish one-sided test, specify either alternative = \"lesser\" alternative = \"greater\".","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"named list containing following entries: p_values: probability observing observed difference variability pair groups difference groups. Computed fraction bootstrap differences greater equal observed difference. Depends alternative specified (\"greater\", \"lesser\", \"two.sided\"). bootstrap_distribution_plot: distribution bootstrap replicate differences variability value. observed differences shown red. red points 0, significant statistical difference groups. observed_stats: observed diversity statistics groups. bootstrap_stats: bootstrap replicate diversity statistics groups. bootstrap_replicates: bootstrap replicate matrices, reported  save_replicates = TRUE.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"","code":"# Statistically compare values of FAVA between # subjects in the xue_microbiome_sample data:   boot_out = bootstrap_fava(relab_matrix = xue_microbiome_sample,                n_replicates = 100,                seed = 1,                group = \"subject\",                K = 524,                S = xue_species_similarity)  # Table of P-values comparing values of FAVA between group 1 and group 2:  boot_out$P_values #>   Comparison P_value P_value_numeric #> 1  XBA - XDA    0.65            0.65 #> 2  XBA - XMA    0.17            0.17 #> 3  XDA - XMA    0.01            0.01   # Plots of the bootstrap distributions of differences in FAVA between each pair of matrices,  # and how the true observed differences (red dots) compare to the distribution.  boot_out$bootstrap_distribution_plot"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Fst of a matrix of compositional vectors — fava","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"function computes population genetic statistic Fst matrix rows sum 1. Values 0 achieved row permutation (1,0,..., 0) least two categories non-zero abundance across rows. value equals 1 row identical.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"","code":"fava(   relab_matrix,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   group = NULL,   normalized = FALSE )"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equaling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. group Optional; string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare. normalized Optional; normalized FAVA used? Default normalized = FALSE; use normalized = TRUE compute normalized FAVA. FAVA can normalized weighted.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"","code":"# Compute the Fst of # the following compositional vectors: q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0) relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  fava(relative_abundances) #> [1] 0.5348837  # Incoporating weights:  # Compute fava ignoring # rows 2 and 3 row_weights = c(0.5, 0, 0, 0.5) fava(relative_abundances, w = row_weights) #> [1] 1  # Compute fava assuming that # categories 1 and 2 are identical: similarity_matrix = diag(4) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 fava(relative_abundances, S = similarity_matrix) #> [1] 0.6923077  # Assume categories 1 and 2 are identical AND # ignore rows 2 and 4: row_weights = c(0.5, 0, 0.5, 0) fava(relative_abundances, w = row_weights, S = similarity_matrix) #> [1] 0.2307692"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"function computes normalized Fst given number rows mean abundance abundant category. employ normalization employed FSTruct package Morrison, Alcala, Rosenberg (2020).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"","code":"fava_norm(relab_matrix, K = ncol(relab_matrix))"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"relab_matrix matrix =nrow(relab_matrix) rows, containing K=ncol(relab_matrix) non-negative entries sum 1. relab_matrix contains metadata, must left-hand side matrix number entries sum 1 (K) must specified. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"","code":"# Compute the weighted fava of # the following compositional vectors: q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0) relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  fava_norm(relative_abundances) #> [1] 0.6204651"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"function computes Gini-Simpson index, statistical measure variability also known Gini-Simpson index, vector non-negative entries sum 1. function returns number 0 1 quantifies variability vector. Values 0 achieved vector permutation (1,0,..., 0). value approaches 1 number categories K increases vector equal (1/K, 1/K, ..., 1/K).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"","code":"gini_simpson(q, K = length(q), S = diag(K))"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"q vector K=length(q) non-negative entries sum 1. K Optional; integer specifying number categories data. Default K=length(q). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equalling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(q)).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"","code":"# Compute unweighted Gini-Simpson index: gini_simpson(q = c(0.4, 0.3, 0.3)) #> [1] 0.66  # Compute Gini-Simpson index assuming that # categories 1 and 2 are identical: similarity_matrix = diag(3) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 gini_simpson(q = c(0.4, 0.3, 0.3), S = similarity_matrix) #> [1] 0.42"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"function computes mean Gini-Simpson index, statistical measure variability also known Gini-Simpson index, set vectors non-negative entries sum 1. function returns number 0 1 quantifies mean variability vectors. Values 0 achieved vector permutation (1,0,..., 0). value approaches 1 number categories K increases vectors equal (1/K, 1/K, ..., 1/K).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"","code":"gini_simpson_mean(   relab_matrix,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   group = NULL )"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equalling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. group Optional; string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"","code":"# To compute the mean Gini-Simpson index of # the following compositional vectors... q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0)  # we could compute the mean manually: mean(sapply(list(q1, q2, q3, q4), gini_simpson)) #> [1] 0.3125  # Or we could use gini_simpson_mean: relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  gini_simpson_mean(relative_abundances) #> [1] 0.3125  # Incoporating weights:  # Compute mean Gini-Simpson index ignoring # rows 2 and 3 row_weights = c(0.5, 0, 0, 0.5) gini_simpson_mean(relative_abundances, w = row_weights) #> [1] 0  # Compute mean Gini-Simpson index assuming that # categories 1 and 2 are identical: similarity_matrix = diag(4) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 gini_simpson_mean(relative_abundances, S = similarity_matrix) #> [1] 0.15625  # Assume categories 1 and 2 are identical AND # ignore rows 2 and 4: row_weights = c(0.5, 0, 0.5, 0) gini_simpson_mean(relative_abundances, w = row_weights, S = similarity_matrix) #> [1] 0.3125"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"function computes Gini-Simpson index \"pooled\" vector equal colMeans(relab_matrix). Values 0 achieved pooled vector permutation (1,0,..., 0). value approaches 1 number categories K increases pooled vector equal (1/K, 1/K, ..., 1/K).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"","code":"gini_simpson_pooled(   relab_matrix,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   group = NULL )"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equalling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. group Optional; string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"","code":"# To compute the pooled Gini-Simpson index of # the following compositional vectors... q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0)  # we could compute the mean manually: qPooled = (q1 + q2 + q3 + q4)/4 gini_simpson(qPooled) #> [1] 0.671875  # Or we could use gini_simpson_pooled: relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  gini_simpson_pooled(relative_abundances) #> [1] 0.671875  # Incoporating weights:  # Compute pooled Gini-Simpson index ignoring # rows 2 and 3 row_weights = c(0.5, 0, 0, 0.5) gini_simpson_pooled(relative_abundances, w = row_weights) #> [1] 0.5  # Compute pooled Gini-Simpson index assuming that # categories 1 and 2 are identical: similarity_matrix = diag(4) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 gini_simpson_pooled(relative_abundances, S = similarity_matrix) #> [1] 0.5078125  # Assume categories 1 and 2 are identical AND # ignore rows 2 and 4: row_weights = c(0.5, 0, 0.5, 0) gini_simpson_pooled(relative_abundances, w = row_weights, S = similarity_matrix) #> [1] 0.40625"},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"function enables graphical visualization matrix compostional data. output plot, vertical bar represents single vector; height color bar corresponds abundance category vector. function produces ggplot object, output can modified using standard ggplot2 syntax.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"","code":"plot_relabund(   relab_matrix,   group = NULL,   time = NULL,   w = NULL,   K = NULL,   arrange = FALSE )"},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"relab_matrix matrix =nrow(relab_matrix) rows, containing K=ncol(relab_matrix) non-negative entries sum 1. relab_matrix contains metadata, must left-hand side matrix number entries sum 1 (K) must specified. group Optional; string specifying name column describes group row (sample) belongs . Use matrices single matrix containing multiple groups samples wish compare. time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). arrange Optional; controls horizontal ordering samples vertical ordering categories. arrange = TRUE arrange = \"\", samples ordered categories greatest abundance categories ordered decreasing abundance. arrange = \"vertical\", sample order unchanged categories ordered decreasing abundance. arrange = \"horizontal\", samples ordered abundant categories, category order unchanged. arrange missing arrange = FALSE, neither order changed.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"ggplot object containing bar plot visualization relative abundance matrix.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"","code":"# Make an example matrix of compositional data # Each row is an individual. Rows sum to 1. population_A = matrix(c(     .5, .3, .2,     .4, .2, .4,     .5, .4, .1,     .6, .1, .3,     .2, 0, .8   ),   nrow = 5,   byrow = TRUE   )    plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = FALSE               )    plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = \"horizontal\"               )    plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = \"vertical\"               )     plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = TRUE  # could also be \"both\"               )    # You can modify the plot as you would any ggplot2 object plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = TRUE               ) +   # Below are example, optional modifications to the default plot   ggplot2::ggtitle(\"Population A\") +   ggplot2::scale_fill_brewer(\"Blues\") +   ggplot2::scale_color_brewer(\"Blues\") +   ggplot2::xlab(\"Individuals\")    # Note that both scale_fill and scale_color are needed to change the color of the bars.     # Plot a dataset which has 2 populations    population_B = matrix(c(     .9, 0, .1,     .6, .4, 0,     .7, 0, .3,     .3, .4, .3,     .5, .3, .2   ),   nrow = 5,   byrow = TRUE   )     populations_AB = cbind(data.frame(c(\"A\", \"A\", \"A\", \"A\", \"A\",                                      \"B\", \"B\", \"B\", \"B\", \"B\")),                          rbind(population_A, population_B))   colnames(populations_AB) = c(\"population\", \"category_1\", \"category_2\", \"category_3\")    plot_relabund(relab_matrix = populations_AB, group = \"population\")   plot_relabund(relab_matrix = populations_AB, group = \"population\", arrange = \"vertical\")   plot_relabund(relab_matrix = populations_AB, group = \"population\", arrange = \"horizontal\")   plot_relabund(relab_matrix = populations_AB, group = \"population\", arrange = \"both\")"},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a relative abundance matrix with sample meta data and OTU abundances from a phyloseq object. — relab_phyloseq","title":"Generate a relative abundance matrix with sample meta data and OTU abundances from a phyloseq object. — relab_phyloseq","text":"R package phyloseq streamlines storage analysis microbiome sequence data. function takes phyloseq object extracts OTU table sample meta data combines one relative abundance matrix rows corresponding samples, meta data left-hand side, OTU relative abundances right-hand side.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a relative abundance matrix with sample meta data and OTU abundances from a phyloseq object. — relab_phyloseq","text":"","code":"relab_phyloseq(phyloseq_object)"},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a relative abundance matrix with sample meta data and OTU abundances from a phyloseq object. — relab_phyloseq","text":"phyloseq_object phyloseq object containing OTU table (otu_table) sample metadata (sample_data).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a relative abundance matrix with sample meta data and OTU abundances from a phyloseq object. — relab_phyloseq","text":"data frame rows representing samples columns representing sample data categories OTU relative abundances.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"function takes vector sampling times, \\(t = (t_1, t_2, \\ldots, t_I)\\) computes normalized vector can used weight sample based time subsequent preceding samples. weighting vector \\(w\\) defined entry, \\(w_i = d_i / 2T\\), \\(T=t_I - t_1\\) \\(d_i = t_{+1} - t_{-1}\\) \\(\\) equal 1 . \\(d_1 = t_2-t_1\\) \\(d_I = t_I-t_{-1}\\).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"","code":"time_weights(times, group = NULL)"},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"times numeric vector sampling times. entry must greater previous entry. group Optional; character vector specifying group identity sampling time. Use samples multiple replicates subjects one data set.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"","code":"time_vector = c(1, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,                 32, 33, 34, 35, 36, 37, 38, 39, 44, 50, 57, 64)  time_weights(times = time_vector) #>  [1] 0.05555556 0.16666667 0.11904762 0.01587302 0.01587302 0.01587302 #>  [7] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 #> [13] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 #> [19] 0.01587302 0.04761905 0.08730159 0.10317460 0.11111111 0.05555556"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute FAVA in sliding windows. — window_fava","title":"Compute FAVA in sliding windows. — window_fava","text":"function computes FAVA sliding window slices data set.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute FAVA in sliding windows. — window_fava","text":"","code":"window_fava(   relab_matrix,   window_size,   window_step = 1,   group = NULL,   index = NULL,   time = NULL,   w = NULL,   S = NULL,   K = NULL,   normalized = FALSE,   alpha = 0.5 )"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute FAVA in sliding windows. — window_fava","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. window_size integer number specifying number samples per window. window_step Optional; integer specifying distance first entry adjacent windows. Default window_step=1. group Optional; string specifying name column describes group row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare. index Optional; string specifying name column relab_matrix containing index sample. example, relab_matrix contains time series data, index column containing time sample. index specified time , time default used index. time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equaling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). normalized Optional; normalized FAVA used? Default normalized = FALSE; use normalized = TRUE compute normalized FAVA. FAVA can normalized weighted. alpha Optional; number 0 1 specifying opacity horizontal lines plotted. Default alpha = 0.5.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute FAVA in sliding windows. — window_fava","text":"list values fava window.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute FAVA in sliding windows. — window_fava","text":"","code":"A = matrix(c(.3,.7,0,.1,0,.9,.2,.5,.3,.1,.8,.1,.3,.4,.3,.6,.4,0,0,.5,.5),            ncol = 3, byrow = TRUE) window_out = window_fava(relab_matrix = A, window_size = 4, normalized = TRUE)"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sliding windows of specified length given the maximum number of samples — window_list","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"function generates list sliding windows conditional two parameters: length window (number samples) total number samples present data.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"","code":"window_list(window_size, length, window_step = 1)"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"window_size integer number specifying number samples per window. length integer number specifying total number samples. window_step Optional; integer number specifying distance first entry adjacent windows. Default window_step=1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"list samples sample indices. list entry represents one window.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"","code":"window_list(window_size = 6, length = 40) #> [[1]] #> [1] 1 2 3 4 5 6 #>  #> [[2]] #> [1] 2 3 4 5 6 7 #>  #> [[3]] #> [1] 3 4 5 6 7 8 #>  #> [[4]] #> [1] 4 5 6 7 8 9 #>  #> [[5]] #> [1]  5  6  7  8  9 10 #>  #> [[6]] #> [1]  6  7  8  9 10 11 #>  #> [[7]] #> [1]  7  8  9 10 11 12 #>  #> [[8]] #> [1]  8  9 10 11 12 13 #>  #> [[9]] #> [1]  9 10 11 12 13 14 #>  #> [[10]] #> [1] 10 11 12 13 14 15 #>  #> [[11]] #> [1] 11 12 13 14 15 16 #>  #> [[12]] #> [1] 12 13 14 15 16 17 #>  #> [[13]] #> [1] 13 14 15 16 17 18 #>  #> [[14]] #> [1] 14 15 16 17 18 19 #>  #> [[15]] #> [1] 15 16 17 18 19 20 #>  #> [[16]] #> [1] 16 17 18 19 20 21 #>  #> [[17]] #> [1] 17 18 19 20 21 22 #>  #> [[18]] #> [1] 18 19 20 21 22 23 #>  #> [[19]] #> [1] 19 20 21 22 23 24 #>  #> [[20]] #> [1] 20 21 22 23 24 25 #>  #> [[21]] #> [1] 21 22 23 24 25 26 #>  #> [[22]] #> [1] 22 23 24 25 26 27 #>  #> [[23]] #> [1] 23 24 25 26 27 28 #>  #> [[24]] #> [1] 24 25 26 27 28 29 #>  #> [[25]] #> [1] 25 26 27 28 29 30 #>  #> [[26]] #> [1] 26 27 28 29 30 31 #>  #> [[27]] #> [1] 27 28 29 30 31 32 #>  #> [[28]] #> [1] 28 29 30 31 32 33 #>  #> [[29]] #> [1] 29 30 31 32 33 34 #>  #> [[30]] #> [1] 30 31 32 33 34 35 #>  #> [[31]] #> [1] 31 32 33 34 35 36 #>  #> [[32]] #> [1] 32 33 34 35 36 37 #>  #> [[33]] #> [1] 33 34 35 36 37 38 #>  #> [[34]] #> [1] 34 35 36 37 38 39 #>  #> [[35]] #> [1] 35 36 37 38 39 40 #>  window_list(window_size = 6, length = 40, window_step = 2) #> [[1]] #> [1] 1 2 3 4 5 6 #>  #> [[2]] #> [1] 3 4 5 6 7 8 #>  #> [[3]] #> [1]  5  6  7  8  9 10 #>  #> [[4]] #> [1]  7  8  9 10 11 12 #>  #> [[5]] #> [1]  9 10 11 12 13 14 #>  #> [[6]] #> [1] 11 12 13 14 15 16 #>  #> [[7]] #> [1] 13 14 15 16 17 18 #>  #> [[8]] #> [1] 15 16 17 18 19 20 #>  #> [[9]] #> [1] 17 18 19 20 21 22 #>  #> [[10]] #> [1] 19 20 21 22 23 24 #>  #> [[11]] #> [1] 21 22 23 24 25 26 #>  #> [[12]] #> [1] 23 24 25 26 27 28 #>  #> [[13]] #> [1] 25 26 27 28 29 30 #>  #> [[14]] #> [1] 27 28 29 30 31 32 #>  #> [[15]] #> [1] 29 30 31 32 33 34 #>  #> [[16]] #> [1] 31 32 33 34 35 36 #>  #> [[17]] #> [1] 33 34 35 36 37 38 #>  #> [[18]] #> [1] 35 36 37 38 39 40 #>"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a plot of FAVA in sliding windows. — window_plot","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"function generates plot normalized unnormalized, weighted unweighted FAVA computed sliding windows across samples one many groups samples.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"","code":"window_plot(window_fava, alpha = 0.5)"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"window_fava output window_fava. alpha Optional; number 0 1 specifying opacity horizontal lines plotted. Default alpha = 0.5.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"ggplot2 object.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"","code":"A = matrix(c(.3,.7,0,.1,0,.9,.2,.5,.3,.1,.8,.1,.3,.4,.3,.6,.4,0,0,.5,.5),            ncol = 3, byrow = TRUE) window_out = window_fava(relab_matrix = A, window_size = 4, normalized = TRUE) window_out$window_data #>        FAVA window_index w1 w2 w3 w4 #> 1 0.3645621            1  1  2  3  4 #> 2 0.3354307            2  2  3  4  5 #> 3 0.1408005            3  3  4  5  6 #> 4 0.2052980            4  4  5  6  7 window_out$window_plot"},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_microbiome_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal microbiome composition data — xue_microbiome_sample","title":"Temporal microbiome composition data — xue_microbiome_sample","text":"subset data generated Katherine Xue et al. detailing longitudinal composition human gut microbiome three subjects experience antiobitic perturbation days 29 34. include subjects XAA, XBA, XCA.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_microbiome_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal microbiome composition data — xue_microbiome_sample","text":"","code":"xue_microbiome_sample"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_microbiome_sample.html","id":"xue-microbiome-sample","dir":"Reference","previous_headings":"","what":"xue_microbiome_sample","title":"Temporal microbiome composition data — xue_microbiome_sample","text":"data frame 75 rows 1,348 columns: subject Subject ID: XBA, XDA, XMA timepoint Time (days) sample collection ... Species names","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of species information — xue_species_info","title":"Table of species information — xue_species_info","text":"data frame providing taxonomic information species included xue_species_tree.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of species information — xue_species_info","text":"","code":"xue_species_info"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_info.html","id":"xue-species-info","dir":"Reference","previous_headings":"","what":"xue_species_info","title":"Table of species information — xue_species_info","text":"#' data frame 1346 rows 9 columns: species_id species_id given xue_microbiome_sample kingdom, phylum, class, order, family, genus, species corresponding taxonomic category species species_id_number numeric code associated species, used xue_species_tree","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","title":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","text":"similarity matrix, entry (,j) corresponding pairwise similarity species species j. similarity matrix derived phylogenetic distance matrix, inferred tree xue_species_tree, using expression s(,j) = exp(-d(,j)), d(,j) phylogenetic distance species j.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","text":"","code":"xue_species_similarity"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_similarity.html","id":"xue-species-similarity","dir":"Reference","previous_headings":"","what":"xue_species_similarity","title":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","text":"dataframe 524 rows 524 columns, corresponding one species.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","title":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","text":"phylogenetic tree Newick format.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","text":"","code":"xue_species_tree"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_tree.html","id":"xue-species-tree","dir":"Reference","previous_headings":"","what":"xue_species_tree","title":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","text":"Newick tree.","code":""}]
