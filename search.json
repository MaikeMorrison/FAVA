[{"path":"https://maikemorrison.github.io/FAVA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 FAVA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maikemorrison.github.io/FAVA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maike Morrison. Author, maintainer, copyright holder.","code":""},{"path":"https://maikemorrison.github.io/FAVA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morrison ML, Xue KS, Rosenberg NA (2024). “Quantifying compositional variability microbial communities FAVA.” bioRxiv, 2024.07.03.601929. doi:10.1101/2024.07.03.601929.","code":"@Article{,   title = {Quantifying compositional variability in microbial communities with FAVA},   author = {Maike L. Morrison and Katherine S. Xue and Noah A. Rosenberg},   journal = {bioRxiv},   year = {2024},   pages = {2024.07.03.601929},   doi = {10.1101/2024.07.03.601929}, }"},{"path":"https://maikemorrison.github.io/FAVA/index.html","id":"fava","dir":"","previous_headings":"","what":"Quantify Compositional Variability Across Relative Abundance Vectors","title":"Quantify Compositional Variability Across Relative Abundance Vectors","text":"FAVA R package implements statistic FAVA, FSTF_{ST}-based Assessment Variability across vectors relative Abundances, well suite helper functions enable visualization statistical analysis relative abundance data. FAVA R package accompanies paper, “Quantifying compositional variability microbial communities FAVA” Morrison et al. (2024). FAVA R package includes following core functions: fava: Quantify variability across many compositional vectors single, normalized index, called FAVA bootstrap_fava: Compare values FAVA pairs abundance matrices window_fava: Compute FAVA sliding windows along rows relative abundance matrix plot_relabund: Visualize relative abundance matrix stacked bar plot","code":""},{"path":"https://maikemorrison.github.io/FAVA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quantify Compositional Variability Across Relative Abundance Vectors","text":"FAVA available download CRAN. Install FAVA :","code":"install.packages(\"FAVA\")"},{"path":"https://maikemorrison.github.io/FAVA/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"Quantify Compositional Variability Across Relative Abundance Vectors","text":"package website, maikemorrison.github.io/FAVA/, contains documentation examples package functions. also contains tutorial usage FAVA analysis microbiome data. tutorial vignette available link.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"bootstrap_fava uses bootstrapping statistically compare FAVA values pairs relative abundance matrices. bootstrap_fava takes options fava, , fava, can separately analyze multiple populations groups samples (specify group), account similarity among categories (specify S) uneven weighting rows (specify w time). bootstrap_fava follows bootstrapping procedure defined Efron Tibshirani (1993). Details bootstrapping procedure available Methods section accompanying paper.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"","code":"bootstrap_fava(   relab_matrix,   n_replicates = 1000,   group,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   normalized = FALSE,   seed = NULL,   alternative = \"two.sided\" )"},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. n_replicates number bootstrap replicate matrices generate. Default n_replicates = 1000. group string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equaling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. normalized Optional; normalized FAVA used? Default normalized = FALSE; use normalized = TRUE compute normalized FAVA. FAVA can normalized weighted. seed Optional; integer used random seed simulations. alternative Optional; want one- two.sided test? Default alternative = \"two.sided\". wish one-sided test, specify either alternative = \"lesser\" alternative = \"greater\".","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"named list containing following entries: p_values: probability observing observed difference variability pair groups difference groups. Computed fraction bootstrap differences greater equal observed difference. Depends alternative specified (\"greater\", \"lesser\", \"two.sided\"). bootstrap_distribution_plot: distribution bootstrap replicate differences variability value. observed differences shown red. red points 0, significant statistical difference groups. observed_stats: observed diversity statistics groups. bootstrap_stats: bootstrap replicate diversity statistics groups.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/bootstrap_fava.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistically compare FAVA values between pairs of relative abundance matrices. — bootstrap_fava","text":"","code":"# Statistically compare values of FAVA between # subjects in the xue_microbiome_sample data:   boot_out = bootstrap_fava(relab_matrix = xue_microbiome_sample,                n_replicates = 20, # should use 1000 for a real analysis                seed = 1,                group = \"subject\",                K = 524,                S = xue_species_similarity)  # Table of P-values comparing values of FAVA between group 1 and group 2:  boot_out$P_values #>   Comparison P_value P_value_numeric #> 1  XBA - XDA     0.6            0.60 #> 2  XBA - XMA    0.05            0.05 #> 3  XDA - XMA   <0.05            0.00   # Plots of the bootstrap distributions of differences in FAVA between each pair of matrices,  # and how the true observed differences (red dots) compare to the distribution.  boot_out$bootstrap_distribution_plot"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Fst of a matrix of compositional vectors — fava","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"function computes population-genetic statistic Fst matrix rows sum 1. Values 0 achieved row permutation (1,0,..., 0) least two categories non-zero abundance across rows. value equals 1 row identical.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"","code":"fava(   relab_matrix,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   group = NULL,   normalized = FALSE )"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equaling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. group Optional; string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare. normalized Optional; normalized FAVA used? Default normalized = FALSE; use normalized = TRUE compute normalized FAVA. FAVA can normalized weighted.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Fst of a matrix of compositional vectors — fava","text":"","code":"# Compute the Fst of # the following compositional vectors: q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0) relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  fava(relative_abundances) #> [1] 0.5348837  # Incoporating weights:  # Compute fava ignoring # rows 2 and 3 row_weights = c(0.5, 0, 0, 0.5) fava(relative_abundances, w = row_weights) #> [1] 1  # Compute fava assuming that # categories 1 and 2 are identical: similarity_matrix = diag(4) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 fava(relative_abundances, S = similarity_matrix) #> [1] 0.6923077  # Assume categories 1 and 2 are identical AND # ignore rows 2 and 4: row_weights = c(0.5, 0, 0.5, 0) fava(relative_abundances, w = row_weights, S = similarity_matrix) #> [1] 0.2307692"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"function computes normalized Fst given number rows mean abundance abundant category. employ normalization employed FSTruct package Morrison, Alcala, Rosenberg (2020) doi:10.1111/1755-0998.13647 .","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"","code":"fava_norm(relab_matrix, K = ncol(relab_matrix))"},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/fava_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the normalized Fst of a matrix of compositional vectors — fava_norm","text":"","code":"# Compute the weighted fava of # the following compositional vectors: q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0) relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  fava_norm(relative_abundances) #> [1] 0.6204651"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"function computes Gini-Simpson index, statistical measure variability known population genetics heterozygosity, avector non-negative entries sum 1. function returns number 0 1 quantifies variability vector. Values 0 achieved vector permutation (1,0,..., 0). value approaches 1 number categories K increases vector equal (1/K, 1/K, ..., 1/K).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"","code":"gini_simpson(q, K = length(q), S = diag(K))"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"q vector K=length(q) non-negative entries sum 1. K Optional; integer specifying number categories data. Default K=length(q). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equalling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(q)).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Gini-Simpson index of a compositional vector — gini_simpson","text":"","code":"# Compute unweighted Gini-Simpson index: gini_simpson(q = c(0.4, 0.3, 0.3)) #> [1] 0.66  # Compute Gini-Simpson index assuming that # categories 1 and 2 are identical: similarity_matrix = diag(3) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 gini_simpson(q = c(0.4, 0.3, 0.3), S = similarity_matrix) #> [1] 0.42"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"function computes mean Gini-Simpson index, statistical measure variability known population genetics heterozygosity, set vectors non-negative entries sum 1. function returns number 0 1 quantifies mean variability vectors. Values 0 achieved vector permutation (1,0,..., 0). value approaches 1 number categories K increases vectors equal (1/K, 1/K, ..., 1/K).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"","code":"gini_simpson_mean(   relab_matrix,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   group = NULL )"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equalling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. group Optional; string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the mean Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_mean","text":"","code":"# To compute the mean Gini-Simpson index of # the following compositional vectors... q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0)  # we could compute the mean manually: mean(sapply(list(q1, q2, q3, q4), gini_simpson)) #> [1] 0.3125  # Or we could use gini_simpson_mean: relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  gini_simpson_mean(relative_abundances) #> [1] 0.3125  # Incoporating weights:  # Compute mean Gini-Simpson index ignoring # rows 2 and 3 row_weights = c(0.5, 0, 0, 0.5) gini_simpson_mean(relative_abundances, w = row_weights) #> [1] 0  # Compute mean Gini-Simpson index assuming that # categories 1 and 2 are identical: similarity_matrix = diag(4) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 gini_simpson_mean(relative_abundances, S = similarity_matrix) #> [1] 0.15625  # Assume categories 1 and 2 are identical AND # ignore rows 2 and 4: row_weights = c(0.5, 0, 0.5, 0) gini_simpson_mean(relative_abundances, w = row_weights, S = similarity_matrix) #> [1] 0.3125"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"function computes Gini-Simpson index \"pooled\" vector equal colMeans(relab_matrix). Values 0 achieved pooled vector permutation (1,0,..., 0). value approaches 1 number categories K increases pooled vector equal (1/K, 1/K, ..., 1/K).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"","code":"gini_simpson_pooled(   relab_matrix,   K = NULL,   S = NULL,   w = NULL,   time = NULL,   group = NULL )"},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equalling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. group Optional; string (vector strings) specifying name(s) column(s) describes group(s) row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"numeric value 0 1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/gini_simpson_pooled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the pooled Gini-Simpson index of the rows in a matrix of compositional vectors — gini_simpson_pooled","text":"","code":"# To compute the pooled Gini-Simpson index of # the following compositional vectors... q1 = c(1,   0,   0,   0) q2 = c(0.5, 0.5, 0,   0) q3 = c(1/4, 1/4, 1/4, 1/4) q4 = c(0,   0,   1,   0)  # we could compute the mean manually: qPooled = (q1 + q2 + q3 + q4)/4 gini_simpson(qPooled) #> [1] 0.671875  # Or we could use gini_simpson_pooled: relative_abundances = matrix(c(q1, q2, q3, q4),                   byrow = TRUE, nrow = 4)  gini_simpson_pooled(relative_abundances) #> [1] 0.671875  # Incoporating weights:  # Compute pooled Gini-Simpson index ignoring # rows 2 and 3 row_weights = c(0.5, 0, 0, 0.5) gini_simpson_pooled(relative_abundances, w = row_weights) #> [1] 0.5  # Compute pooled Gini-Simpson index assuming that # categories 1 and 2 are identical: similarity_matrix = diag(4) similarity_matrix[1,2] = 1 similarity_matrix[2,1] = 1 gini_simpson_pooled(relative_abundances, S = similarity_matrix) #> [1] 0.5078125  # Assume categories 1 and 2 are identical AND # ignore rows 2 and 4: row_weights = c(0.5, 0, 0.5, 0) gini_simpson_pooled(relative_abundances, w = row_weights, S = similarity_matrix) #> [1] 0.40625"},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"function enables graphical visualization matrix compostional data. output plot, vertical bar represents single vector; height color bar corresponds abundance category vector. function produces ggplot object, output can modified using standard ggplot2 syntax.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"","code":"plot_relabund(   relab_matrix,   group = NULL,   time = NULL,   w = NULL,   K = NULL,   arrange = FALSE )"},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. group Optional; string specifying name column describes group row (sample) belongs . Use matrices single matrix containing multiple groups samples wish compare. time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). arrange Optional; controls horizontal ordering samples vertical ordering categories. arrange = TRUE arrange = \"\", samples ordered categories greatest abundance categories ordered decreasing abundance. arrange = \"vertical\", sample order unchanged categories ordered decreasing abundance. arrange = \"horizontal\", samples ordered abundant categories, category order unchanged. arrange missing arrange = FALSE, neither order changed.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"ggplot object containing bar plot visualization relative abundance matrix.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/plot_relabund.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a relative abundance matrix as a stacked bar plot. — plot_relabund","text":"","code":"# Make an example matrix of compositional data # Each row is an individual. Rows sum to 1. population_A = matrix(c(     .5, .3, .2,     .4, .2, .4,     .5, .4, .1,     .6, .1, .3,     .2, 0, .8   ),   nrow = 5,   byrow = TRUE   )    plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = FALSE               )    plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = \"horizontal\"               )    plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = \"vertical\"               )     plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = TRUE  # could also be \"both\"               )    # You can modify the plot as you would any ggplot2 object plot_relabund(relab_matrix = population_A,               K = 3, # How many categories per vector?               arrange = TRUE               ) +   # Below are example, optional modifications to the default plot   ggplot2::ggtitle(\"Population A\") +   ggplot2::scale_fill_brewer(\"Blues\") +   ggplot2::scale_color_brewer(\"Blues\") +   ggplot2::xlab(\"Individuals\")    # Note that both scale_fill and scale_color are needed to change the color of the bars.     # Plot a dataset which has 2 populations    population_B = matrix(c(     .9, 0, .1,     .6, .4, 0,     .7, 0, .3,     .3, .4, .3,     .5, .3, .2   ),   nrow = 5,   byrow = TRUE   )     populations_AB = cbind(data.frame(c(\"A\", \"A\", \"A\", \"A\", \"A\",                                      \"B\", \"B\", \"B\", \"B\", \"B\")),                          rbind(population_A, population_B))   colnames(populations_AB) = c(\"population\", \"category_1\", \"category_2\", \"category_3\")    plot_relabund(relab_matrix = populations_AB, group = \"population\")   plot_relabund(relab_matrix = populations_AB, group = \"population\", arrange = \"vertical\")   plot_relabund(relab_matrix = populations_AB, group = \"population\", arrange = \"horizontal\")   plot_relabund(relab_matrix = populations_AB, group = \"population\", arrange = \"both\")"},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a relative abundance matrix with sample metadata and OTU abundances from a phyloseq object. — relab_phyloseq","title":"Generate a relative abundance matrix with sample metadata and OTU abundances from a phyloseq object. — relab_phyloseq","text":"R package phyloseq streamlines storage analysis microbiome sequence data. function takes phyloseq object extracts OTU table sample metadata combines one relative abundance matrix rows corresponding samples, metadata left-hand side, OTU relative abundances right-hand side.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a relative abundance matrix with sample metadata and OTU abundances from a phyloseq object. — relab_phyloseq","text":"","code":"relab_phyloseq(phyloseq_object)"},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a relative abundance matrix with sample metadata and OTU abundances from a phyloseq object. — relab_phyloseq","text":"phyloseq_object phyloseq object containing OTU table (otu_table) sample metadata (sample_data).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a relative abundance matrix with sample metadata and OTU abundances from a phyloseq object. — relab_phyloseq","text":"data frame rows representing samples columns representing sample data categories OTU relative abundances. OTU abundances automatically normalized sum 1 sample, though warning provided renormalization necessary.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/relab_phyloseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a relative abundance matrix with sample metadata and OTU abundances from a phyloseq object. — relab_phyloseq","text":"","code":"if (requireNamespace(\"phyloseq\", quietly = TRUE)) {   data(GlobalPatterns, package = \"phyloseq\")  # Make a small phyloseq object for demonstration phyloseq_subset = phyloseq::subset_taxa(phyloseq::subset_samples(GlobalPatterns,                                                                  X.SampleID %in%                                                                  c(\"CL3\", \"CC1\")),                                         Order == \"Cenarchaeales\")   otu_table = relab_phyloseq(phyloseq_subset)   otu_table[, 1:10] } #> Warning: Some of the sample abundances do not sum to exactly 1. Rounding the sum of each sample to 1 by dividing all entries by the sum of the sample. #>     X.SampleID  Primer Final_Barcode Barcode_truncated_plus_T #> CL3        CL3 ILBC_01        AACGCA                   TGCGTT #> CC1        CC1 ILBC_02        AACTCG                   CGAGTT #>     Barcode_full_length SampleType                              Description #> CL3         CTAGCGTGCGT       Soil Calhoun South Carolina Pine soil, pH 4.9 #> CC1         CATCGACGAGT       Soil Cedar Creek Minnesota, grassland, pH 6.1 #>        215972      31759     30678 #> CL3 0.0000000 0.00000000 0.0000000 #> CC1 0.1578947 0.05263158 0.1578947"},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"function takes vector sampling times, \\(t = (t_1, t_2, \\ldots, t_I)\\) computes normalized vector can used weight sample based time subsequent preceding samples. weighting vector \\(w\\) defined entry, \\(w_i = d_i / 2T\\), \\(T=t_I - t_1\\) \\(d_i = t_{+1} - t_{-1}\\) \\(\\) equal 1 . \\(d_1 = t_2-t_1\\) \\(d_I = t_I-t_{-1}\\).","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"","code":"time_weights(times, group = NULL)"},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"times numeric vector sampling times. entry must greater previous entry. group Optional; character vector specifying group identity sampling time. Use samples multiple replicates subjects one dataset.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"numeric vector. entry provides weight entry provided times vector. group specified, vector sums 1. group specified, vector sums number distinct groups.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/time_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a normalized weighting vector based on a vector of sampling times. — time_weights","text":"","code":"time_vector = c(1, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,                 32, 33, 34, 35, 36, 37, 38, 39, 44, 50, 57, 64)  time_weights(times = time_vector) #>  [1] 0.05555556 0.16666667 0.11904762 0.01587302 0.01587302 0.01587302 #>  [7] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 #> [13] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 #> [19] 0.01587302 0.04761905 0.08730159 0.10317460 0.11111111 0.05555556"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute FAVA in sliding windows. — window_fava","title":"Compute FAVA in sliding windows. — window_fava","text":"function computes FAVA sliding window slices dataset.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute FAVA in sliding windows. — window_fava","text":"","code":"window_fava(   relab_matrix,   window_size,   window_step = 1,   group = NULL,   index = NULL,   time = NULL,   w = NULL,   S = NULL,   K = NULL,   normalized = FALSE,   alpha = 0.5 )"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute FAVA in sliding windows. — window_fava","text":"relab_matrix matrix data frame rows containing non-negative entries sum 1. row represents sample, column represents category, entry represents abundance category sample. relab_matrix contains metadata, must left-hand side matrix, right K entries row must sum 1, K must specified. Otherwise, entries row must sum 1. window_size integer number specifying number samples per window. window_step Optional; integer specifying distance first entry adjacent windows. Default window_step=1. group Optional; string specifying name column describes group row (sample) belongs . Use relab_matrix single matrix containing multiple groups samples wish compare. index Optional; string specifying name column relab_matrix containing index sample. example, relab_matrix contains time series data, index column containing time sample. index specified time , time default used index. time Optional; string specifying name column describes sampling time row. Include wish weight FAVA distance samples. w Optional; vector length non-negative entries sum 1. Entry w[] represents weight placed row computation mean abundance category across rows. default value w = rep(1/nrow(relab_matrix), nrow(relab_matrix)). S Optional; K x K similarity matrix diagonal elements equal 1 -diagonal elements 0 1. Entry S[,k] !=k similarity category category k, equaling 1 categories treated identical equaling 0 treated totally dissimilar. default value S = diag(ncol(relab_matrix)). K Optional; integer specifying number categories data. Default K=ncol(relab_matrix). normalized Optional; normalized FAVA used? Default normalized = FALSE; use normalized = TRUE compute normalized FAVA. FAVA can normalized weighted. alpha Optional; number 0 1 specifying opacity horizontal lines plotted. Default alpha = 0.5.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute FAVA in sliding windows. — window_fava","text":"list values FAVA window.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_fava.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute FAVA in sliding windows. — window_fava","text":"","code":"A = matrix(c(.3,.7,0,.1,0,.9,.2,.5,.3,.1,.8,.1,.3,.4,.3,.6,.4,0,0,.5,.5),            ncol = 3, byrow = TRUE) window_out = window_fava(relab_matrix = A, window_size = 4, normalized = TRUE)"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sliding windows of specified length given the maximum number of samples — window_list","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"function generates list sliding windows conditional two parameters: length window (number samples) total number samples present data.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"","code":"window_list(window_size, length, window_step = 1)"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"window_size integer number specifying number samples per window. length integer number specifying total number samples. window_step Optional; integer number specifying distance first entry adjacent windows. Default window_step=1.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"list samples sample indices. list entry represents one window.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sliding windows of specified length given the maximum number of samples — window_list","text":"","code":"window_list(window_size = 6, length = 40) #> [[1]] #> [1] 1 2 3 4 5 6 #>  #> [[2]] #> [1] 2 3 4 5 6 7 #>  #> [[3]] #> [1] 3 4 5 6 7 8 #>  #> [[4]] #> [1] 4 5 6 7 8 9 #>  #> [[5]] #> [1]  5  6  7  8  9 10 #>  #> [[6]] #> [1]  6  7  8  9 10 11 #>  #> [[7]] #> [1]  7  8  9 10 11 12 #>  #> [[8]] #> [1]  8  9 10 11 12 13 #>  #> [[9]] #> [1]  9 10 11 12 13 14 #>  #> [[10]] #> [1] 10 11 12 13 14 15 #>  #> [[11]] #> [1] 11 12 13 14 15 16 #>  #> [[12]] #> [1] 12 13 14 15 16 17 #>  #> [[13]] #> [1] 13 14 15 16 17 18 #>  #> [[14]] #> [1] 14 15 16 17 18 19 #>  #> [[15]] #> [1] 15 16 17 18 19 20 #>  #> [[16]] #> [1] 16 17 18 19 20 21 #>  #> [[17]] #> [1] 17 18 19 20 21 22 #>  #> [[18]] #> [1] 18 19 20 21 22 23 #>  #> [[19]] #> [1] 19 20 21 22 23 24 #>  #> [[20]] #> [1] 20 21 22 23 24 25 #>  #> [[21]] #> [1] 21 22 23 24 25 26 #>  #> [[22]] #> [1] 22 23 24 25 26 27 #>  #> [[23]] #> [1] 23 24 25 26 27 28 #>  #> [[24]] #> [1] 24 25 26 27 28 29 #>  #> [[25]] #> [1] 25 26 27 28 29 30 #>  #> [[26]] #> [1] 26 27 28 29 30 31 #>  #> [[27]] #> [1] 27 28 29 30 31 32 #>  #> [[28]] #> [1] 28 29 30 31 32 33 #>  #> [[29]] #> [1] 29 30 31 32 33 34 #>  #> [[30]] #> [1] 30 31 32 33 34 35 #>  #> [[31]] #> [1] 31 32 33 34 35 36 #>  #> [[32]] #> [1] 32 33 34 35 36 37 #>  #> [[33]] #> [1] 33 34 35 36 37 38 #>  #> [[34]] #> [1] 34 35 36 37 38 39 #>  #> [[35]] #> [1] 35 36 37 38 39 40 #>  window_list(window_size = 6, length = 40, window_step = 2) #> [[1]] #> [1] 1 2 3 4 5 6 #>  #> [[2]] #> [1] 3 4 5 6 7 8 #>  #> [[3]] #> [1]  5  6  7  8  9 10 #>  #> [[4]] #> [1]  7  8  9 10 11 12 #>  #> [[5]] #> [1]  9 10 11 12 13 14 #>  #> [[6]] #> [1] 11 12 13 14 15 16 #>  #> [[7]] #> [1] 13 14 15 16 17 18 #>  #> [[8]] #> [1] 15 16 17 18 19 20 #>  #> [[9]] #> [1] 17 18 19 20 21 22 #>  #> [[10]] #> [1] 19 20 21 22 23 24 #>  #> [[11]] #> [1] 21 22 23 24 25 26 #>  #> [[12]] #> [1] 23 24 25 26 27 28 #>  #> [[13]] #> [1] 25 26 27 28 29 30 #>  #> [[14]] #> [1] 27 28 29 30 31 32 #>  #> [[15]] #> [1] 29 30 31 32 33 34 #>  #> [[16]] #> [1] 31 32 33 34 35 36 #>  #> [[17]] #> [1] 33 34 35 36 37 38 #>  #> [[18]] #> [1] 35 36 37 38 39 40 #>"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a plot of FAVA in sliding windows. — window_plot","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"function generates plot normalized unnormalized, weighted unweighted FAVA computed sliding windows across samples one many groups samples.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"","code":"window_plot(window_fava, alpha = 0.5)"},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"window_fava output window_fava. alpha Optional; number 0 1 specifying opacity horizontal lines plotted. Default alpha = 0.5.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"ggplot2 object.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/window_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a plot of FAVA in sliding windows. — window_plot","text":"","code":"A = matrix(c(.3,.7,0,.1,0,.9,.2,.5,.3,.1,.8,.1,.3,.4,.3,.6,.4,0,0,.5,.5),            ncol = 3, byrow = TRUE) window_out = window_fava(relab_matrix = A, window_size = 4, normalized = TRUE) window_out$window_data #>        FAVA window_index w1 w2 w3 w4 #> 1 0.3645621            1  1  2  3  4 #> 2 0.3354307            2  2  3  4  5 #> 3 0.1408005            3  3  4  5  6 #> 4 0.2052980            4  4  5  6  7 window_out$window_plot"},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_microbiome_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal microbiome composition data — xue_microbiome_sample","title":"Temporal microbiome composition data — xue_microbiome_sample","text":"subset data generated Xue et al. (2024) detailing longitudinal composition human gut microbiome three subjects experience antiobitic perturbation days 29 34. include subjects XAA, XBA, XCA. Data doi:10.1101/2023.09.26.559480 .","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_microbiome_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal microbiome composition data — xue_microbiome_sample","text":"","code":"xue_microbiome_sample"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_microbiome_sample.html","id":"xue-microbiome-sample","dir":"Reference","previous_headings":"","what":"xue_microbiome_sample","title":"Temporal microbiome composition data — xue_microbiome_sample","text":"data frame 75 rows 1,348 columns: subject Subject ID: XBA, XDA, XMA timepoint Time (days) sample collection ... Species names","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of species information — xue_species_info","title":"Table of species information — xue_species_info","text":"data frame providing taxonomic information species included xue_species_tree.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of species information — xue_species_info","text":"","code":"xue_species_info"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_info.html","id":"xue-species-info","dir":"Reference","previous_headings":"","what":"xue_species_info","title":"Table of species information — xue_species_info","text":"data frame 1346 rows 9 columns: species_id species_id given xue_microbiome_sample kingdom, phylum, class, order, family, genus, species corresponding taxonomic category species species_id_number numeric code associated species, used xue_species_tree","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","title":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","text":"similarity matrix, entry (,j) corresponding pairwise similarity species species j. similarity matrix derived phylogenetic distance matrix, inferred tree xue_species_tree, using expression s(,j) = exp(-d(,j)), d(,j) phylogenetic distance species j.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","text":"","code":"xue_species_similarity"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_similarity.html","id":"xue-species-similarity","dir":"Reference","previous_headings":"","what":"xue_species_similarity","title":"Species similarity matrix for the species included in xue_microbiome_sample — xue_species_similarity","text":"data frame 524 rows 524 columns, corresponding one species.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","title":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","text":"phylogenetic tree Newick format.","code":""},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","text":"","code":"xue_species_tree"},{"path":[]},{"path":"https://maikemorrison.github.io/FAVA/reference/xue_species_tree.html","id":"xue-species-tree","dir":"Reference","previous_headings":"","what":"xue_species_tree","title":"Phylogenetic tree for the species included in xue_microbiome_sample — xue_species_tree","text":"Newick tree.","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-107","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.7","title":"FAVA 1.0.7","text":"CRAN release: 2024-12-10 Update citation formatting Description","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-106","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.6","title":"FAVA 1.0.6","text":"Update DOI URL formatting .","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-105","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.5","title":"FAVA 1.0.5","text":"Update doi URL formatting.","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-104","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.4","title":"FAVA 1.0.4","text":"Optimize bootstrap_fava faster run time. Fix typos documentation. Remove tutorial R package smaller file size.","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-103","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.3","title":"FAVA 1.0.3","text":"Update README formatting Update examples satisfy CRAN requirements","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-102","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.2","title":"FAVA 1.0.2","text":"Reduced run times relab_phyloseq bootstrap_fava examples.","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-101","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.1","title":"FAVA 1.0.1","text":"Removed phyloseq data FAVA package package data run without phyloseq R package.","code":""},{"path":"https://maikemorrison.github.io/FAVA/news/index.html","id":"fava-100","dir":"Changelog","previous_headings":"","what":"FAVA 1.0.0","title":"FAVA 1.0.0","text":"Added NEWS.md file track changes package.","code":""}]
