% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fst_functions.R
\name{fst}
\alias{fst}
\title{Compute the Fst of a matrix of compositional vectors}
\usage{
fst(Q, w = rep(1/nrow(Q), nrow(Q)), S = diag(ncol(Q)), K = ncol(Q))
}
\arguments{
\item{Q}{A matrix with \code{I=nrow(Q)} rows, each containing \code{K=ncol(Q)} non-negative entries that sum to 1.
If \code{Q} contains any metadata, it must be on the left-hand side of the matrix and the number of entries
that sum to 1 (\code{K}) must be specified.}

\item{w}{Optional; a vector of length \code{I} with non-negative entries that sum to 1. Entry \code{w[i]} represents the weight placed on row \code{i} in the computation of the mean abundance of each category across rows. The default value is \code{w = rep(1/nrow(Q), nrow(Q))}.}

\item{S}{Optional; a K x K similarity matrix with diagonal elements equal to 1 and off-diagonal elements between 0 and 1. Entry \code{S[i,k]} for \code{i!=k} is the similarity between category and \code{i} and category \code{k}, equalling 1 if the categories are to be treated as identical and equaling 0 if they are to be treated as totally dissimilar. The default value is \code{S = diag(ncol(Q))}.}

\item{K}{Optional; an integer specifying the number of categories in the data. Default is \code{K=ncol(Q)}.}
}
\value{
A numeric value between 0 and 1.
}
\description{
This function computes the population genetic statistic Fst on any matrix with rows that sum to 1. Values of 0 are achieved when each row is a permutation of (1,0,..., 0) and at least two categories have non-zero abundance across all rows. The value equals 1 when each row is identical.
}
\examples{
# Compute the Fst of
# the following compositional vectors:
q1 = c(1,   0,   0,   0)
q2 = c(0.5, 0.5, 0,   0)
q3 = c(1/4, 1/4, 1/4, 1/4)
q4 = c(0,   0,   1,   0)
Q_matrix = matrix(c(q1, q2, q3, q4),
                  byrow = TRUE, nrow = 4)

fst(Q_matrix)

# Incoporating weights:

# Compute Fst ignoring
# rows 2 and 3
row_weights = c(0.5, 0, 0, 0.5)
fst(Q_matrix, w = row_weights)

# Compute Fst assuming that
# categories 1 and 2 are identical:
similarity_matrix = diag(4)
similarity_matrix[1,2] = 1
similarity_matrix[2,1] = 1
fst(Q_matrix, S = similarity_matrix)

# Assume categories 1 and 2 are identical AND
# ignore rows 2 and 4:
row_weights = c(0.5, 0, 0.5, 0)
fst(Q_matrix, w = row_weights, S = similarity_matrix)
}
