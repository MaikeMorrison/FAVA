
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "FAVA"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "FAVA-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('FAVA')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bootstrap_fava")
> ### * bootstrap_fava
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bootstrap_fava
> ### Title: Statistically compare FAVA values between pairs of relative
> ###   abundance matrices.
> ### Aliases: bootstrap_fava
> 
> ### ** Examples
> 
> # Statistically compare values of FAVA between
> # subjects in the xue_microbiome_sample data:
> 
>  boot_out = bootstrap_fava(relab_matrix = xue_microbiome_sample,
+                n_replicates = 100,
+                seed = 1,
+                group = "subject",
+                K = 524,
+                S = xue_species_similarity)
> 
> # Table of P-values comparing values of FAVA between group 1 and group 2:
>  boot_out$P_values
  Comparison P_value P_value_numeric
1  XBA - XDA    0.65            0.65
2  XBA - XMA    0.17            0.17
3  XDA - XMA    0.01            0.01
> 
>  # Plots of the bootstrap distributions of differences in FAVA between each pair of matrices,
>  # and how the true observed differences (red dots) compare to the distribution.
>  boot_out$bootstrap_distribution_plot
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bootstrap_fava", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fava")
> ### * fava
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fava
> ### Title: Compute the Fst of a matrix of compositional vectors
> ### Aliases: fava
> 
> ### ** Examples
> 
> # Compute the Fst of
> # the following compositional vectors:
> q1 = c(1,   0,   0,   0)
> q2 = c(0.5, 0.5, 0,   0)
> q3 = c(1/4, 1/4, 1/4, 1/4)
> q4 = c(0,   0,   1,   0)
> relative_abundances = matrix(c(q1, q2, q3, q4),
+                   byrow = TRUE, nrow = 4)
> 
> fava(relative_abundances)
[1] 0.5348837
> 
> # Incoporating weights:
> 
> # Compute fava ignoring
> # rows 2 and 3
> row_weights = c(0.5, 0, 0, 0.5)
> fava(relative_abundances, w = row_weights)
[1] 1
> 
> # Compute fava assuming that
> # categories 1 and 2 are identical:
> similarity_matrix = diag(4)
> similarity_matrix[1,2] = 1
> similarity_matrix[2,1] = 1
> fava(relative_abundances, S = similarity_matrix)
[1] 0.6923077
> 
> # Assume categories 1 and 2 are identical AND
> # ignore rows 2 and 4:
> row_weights = c(0.5, 0, 0.5, 0)
> fava(relative_abundances, w = row_weights, S = similarity_matrix)
[1] 0.2307692
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fava", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fava_norm")
> ### * fava_norm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fava_norm
> ### Title: Compute the normalized Fst of a matrix of compositional vectors
> ### Aliases: fava_norm
> 
> ### ** Examples
> 
> # Compute the weighted fava of
> # the following compositional vectors:
> q1 = c(1,   0,   0,   0)
> q2 = c(0.5, 0.5, 0,   0)
> q3 = c(1/4, 1/4, 1/4, 1/4)
> q4 = c(0,   0,   1,   0)
> relative_abundances = matrix(c(q1, q2, q3, q4),
+                   byrow = TRUE, nrow = 4)
> 
> fava_norm(relative_abundances)
[1] 0.6204651
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fava_norm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gini_simpson")
> ### * gini_simpson
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gini_simpson
> ### Title: Compute the Gini-Simpson index of a compositional vector
> ### Aliases: gini_simpson
> 
> ### ** Examples
> 
> # Compute unweighted Gini-Simpson index:
> gini_simpson(q = c(0.4, 0.3, 0.3))
[1] 0.66
> 
> # Compute Gini-Simpson index assuming that
> # categories 1 and 2 are identical:
> similarity_matrix = diag(3)
> similarity_matrix[1,2] = 1
> similarity_matrix[2,1] = 1
> gini_simpson(q = c(0.4, 0.3, 0.3), S = similarity_matrix)
[1] 0.42
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gini_simpson", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gini_simpson_mean")
> ### * gini_simpson_mean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gini_simpson_mean
> ### Title: Compute the mean Gini-Simpson index of the rows in a matrix of
> ###   compositional vectors
> ### Aliases: gini_simpson_mean
> 
> ### ** Examples
> 
> # To compute the mean Gini-Simpson index of
> # the following compositional vectors...
> q1 = c(1,   0,   0,   0)
> q2 = c(0.5, 0.5, 0,   0)
> q3 = c(1/4, 1/4, 1/4, 1/4)
> q4 = c(0,   0,   1,   0)
> 
> # we could compute the mean manually:
> mean(sapply(list(q1, q2, q3, q4), gini_simpson))
[1] 0.3125
> 
> # Or we could use gini_simpson_mean:
> relative_abundances = matrix(c(q1, q2, q3, q4),
+                   byrow = TRUE, nrow = 4)
> 
> gini_simpson_mean(relative_abundances)
[1] 0.3125
> 
> # Incoporating weights:
> 
> # Compute mean Gini-Simpson index ignoring
> # rows 2 and 3
> row_weights = c(0.5, 0, 0, 0.5)
> gini_simpson_mean(relative_abundances, w = row_weights)
[1] 0
> 
> # Compute mean Gini-Simpson index assuming that
> # categories 1 and 2 are identical:
> similarity_matrix = diag(4)
> similarity_matrix[1,2] = 1
> similarity_matrix[2,1] = 1
> gini_simpson_mean(relative_abundances, S = similarity_matrix)
[1] 0.15625
> 
> # Assume categories 1 and 2 are identical AND
> # ignore rows 2 and 4:
> row_weights = c(0.5, 0, 0.5, 0)
> gini_simpson_mean(relative_abundances, w = row_weights, S = similarity_matrix)
[1] 0.3125
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gini_simpson_mean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gini_simpson_pooled")
> ### * gini_simpson_pooled
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gini_simpson_pooled
> ### Title: Compute the pooled Gini-Simpson index of the rows in a matrix of
> ###   compositional vectors
> ### Aliases: gini_simpson_pooled
> 
> ### ** Examples
> 
> # To compute the pooled Gini-Simpson index of
> # the following compositional vectors...
> q1 = c(1,   0,   0,   0)
> q2 = c(0.5, 0.5, 0,   0)
> q3 = c(1/4, 1/4, 1/4, 1/4)
> q4 = c(0,   0,   1,   0)
> 
> # we could compute the mean manually:
> qPooled = (q1 + q2 + q3 + q4)/4
> gini_simpson(qPooled)
[1] 0.671875
> 
> # Or we could use gini_simpson_pooled:
> relative_abundances = matrix(c(q1, q2, q3, q4),
+                   byrow = TRUE, nrow = 4)
> 
> gini_simpson_pooled(relative_abundances)
[1] 0.671875
> 
> # Incoporating weights:
> 
> # Compute pooled Gini-Simpson index ignoring
> # rows 2 and 3
> row_weights = c(0.5, 0, 0, 0.5)
> gini_simpson_pooled(relative_abundances, w = row_weights)
[1] 0.5
> 
> # Compute pooled Gini-Simpson index assuming that
> # categories 1 and 2 are identical:
> similarity_matrix = diag(4)
> similarity_matrix[1,2] = 1
> similarity_matrix[2,1] = 1
> gini_simpson_pooled(relative_abundances, S = similarity_matrix)
[1] 0.5078125
> 
> # Assume categories 1 and 2 are identical AND
> # ignore rows 2 and 4:
> row_weights = c(0.5, 0, 0.5, 0)
> gini_simpson_pooled(relative_abundances, w = row_weights, S = similarity_matrix)
[1] 0.40625
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gini_simpson_pooled", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_relabund")
> ### * plot_relabund
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_relabund
> ### Title: Visualize a relative abundance matrix as a stacked bar plot.
> ### Aliases: plot_relabund
> 
> ### ** Examples
> 
> 
> # Make an example matrix of compositional data
> # Each row is an individual. Rows sum to 1.
> population_A = matrix(c(
+     .5, .3, .2,
+     .4, .2, .4,
+     .5, .4, .1,
+     .6, .1, .3,
+     .2, 0, .8
+   ),
+   nrow = 5,
+   byrow = TRUE
+   )
> 
>   plot_relabund(relab_matrix = population_A,
+               K = 3, # How many categories per vector?
+               arrange = FALSE
+               )
>   plot_relabund(relab_matrix = population_A,
+               K = 3, # How many categories per vector?
+               arrange = "horizontal"
+               )
>   plot_relabund(relab_matrix = population_A,
+               K = 3, # How many categories per vector?
+               arrange = "vertical"
+               )
>    plot_relabund(relab_matrix = population_A,
+               K = 3, # How many categories per vector?
+               arrange = TRUE  # could also be "both"
+               )
> 
> 
> # You can modify the plot as you would any ggplot2 object
> plot_relabund(relab_matrix = population_A,
+               K = 3, # How many categories per vector?
+               arrange = TRUE
+               ) +
+   # Below are example, optional modifications to the default plot
+   ggplot2::ggtitle("Population A") +
+   ggplot2::scale_fill_brewer("Blues") +
+   ggplot2::scale_color_brewer("Blues") +
+   ggplot2::xlab("Individuals")
>   # Note that both scale_fill and scale_color are needed to change the color of the bars.
> 
> 
>   # Plot a dataset which has 2 populations
> 
>   population_B = matrix(c(
+     .9, 0, .1,
+     .6, .4, 0,
+     .7, 0, .3,
+     .3, .4, .3,
+     .5, .3, .2
+   ),
+   nrow = 5,
+   byrow = TRUE
+   )
> 
> 
>   populations_AB = cbind(data.frame(c("A", "A", "A", "A", "A",
+                                      "B", "B", "B", "B", "B")),
+                          rbind(population_A, population_B))
>   colnames(populations_AB) = c("population", "category_1", "category_2", "category_3")
> 
> 
>  plot_relabund(relab_matrix = populations_AB, group = "population")
>  plot_relabund(relab_matrix = populations_AB, group = "population", arrange = "vertical")
>  plot_relabund(relab_matrix = populations_AB, group = "population", arrange = "horizontal")
>  plot_relabund(relab_matrix = populations_AB, group = "population", arrange = "both")
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_relabund", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("relab_phyloseq")
> ### * relab_phyloseq
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: relab_phyloseq
> ### Title: Generate a relative abundance matrix with sample meta data and
> ###   OTU abundances from a phyloseq object.
> ### Aliases: relab_phyloseq
> 
> ### ** Examples
> 
> if (requireNamespace("phyloseq", quietly = TRUE)) {
+   data(GlobalPatterns, package = "phyloseq")
+   phyloseq_subset = phyloseq::subset_samples(GlobalPatterns,
+                                              X.SampleID %in% c("CL3", "CC1"))
+   otu_table = relab_phyloseq(phyloseq_subset)
+   otu_table[, 1:10]
+ }
Warning in relab_phyloseq(phyloseq_subset) :
  Some of the sample abundances do not sum to exactly 1. Rounding the sum of each sample to 1 by dividing all entries by the sum of the sample.
    X.SampleID  Primer Final_Barcode Barcode_truncated_plus_T
CL3        CL3 ILBC_01        AACGCA                   TGCGTT
CC1        CC1 ILBC_02        AACTCG                   CGAGTT
    Barcode_full_length SampleType                              Description
CL3         CTAGCGTGCGT       Soil Calhoun South Carolina Pine soil, pH 4.9
CC1         CATCGACGAGT       Soil Cedar Creek Minnesota, grassland, pH 6.1
    549322 522457 951
CL3      0      0   0
CC1      0      0   0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("relab_phyloseq", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("time_weights")
> ### * time_weights
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: time_weights
> ### Title: Compute a normalized weighting vector based on a vector of
> ###   sampling times.
> ### Aliases: time_weights
> 
> ### ** Examples
> 
> time_vector = c(1, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
+                 32, 33, 34, 35, 36, 37, 38, 39, 44, 50, 57, 64)
> 
> time_weights(times = time_vector)
 [1] 0.05555556 0.16666667 0.11904762 0.01587302 0.01587302 0.01587302
 [7] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302
[13] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302
[19] 0.01587302 0.04761905 0.08730159 0.10317460 0.11111111 0.05555556
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("time_weights", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("window_fava")
> ### * window_fava
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: window_fava
> ### Title: Compute FAVA in sliding windows.
> ### Aliases: window_fava
> 
> ### ** Examples
> 
> A = matrix(c(.3,.7,0,.1,0,.9,.2,.5,.3,.1,.8,.1,.3,.4,.3,.6,.4,0,0,.5,.5),
+            ncol = 3, byrow = TRUE)
> window_out = window_fava(relab_matrix = A, window_size = 4, normalized = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("window_fava", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("window_list")
> ### * window_list
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: window_list
> ### Title: Generate sliding windows of specified length given the maximum
> ###   number of samples
> ### Aliases: window_list
> 
> ### ** Examples
> 
> window_list(window_size = 6, length = 40)
[[1]]
[1] 1 2 3 4 5 6

[[2]]
[1] 2 3 4 5 6 7

[[3]]
[1] 3 4 5 6 7 8

[[4]]
[1] 4 5 6 7 8 9

[[5]]
[1]  5  6  7  8  9 10

[[6]]
[1]  6  7  8  9 10 11

[[7]]
[1]  7  8  9 10 11 12

[[8]]
[1]  8  9 10 11 12 13

[[9]]
[1]  9 10 11 12 13 14

[[10]]
[1] 10 11 12 13 14 15

[[11]]
[1] 11 12 13 14 15 16

[[12]]
[1] 12 13 14 15 16 17

[[13]]
[1] 13 14 15 16 17 18

[[14]]
[1] 14 15 16 17 18 19

[[15]]
[1] 15 16 17 18 19 20

[[16]]
[1] 16 17 18 19 20 21

[[17]]
[1] 17 18 19 20 21 22

[[18]]
[1] 18 19 20 21 22 23

[[19]]
[1] 19 20 21 22 23 24

[[20]]
[1] 20 21 22 23 24 25

[[21]]
[1] 21 22 23 24 25 26

[[22]]
[1] 22 23 24 25 26 27

[[23]]
[1] 23 24 25 26 27 28

[[24]]
[1] 24 25 26 27 28 29

[[25]]
[1] 25 26 27 28 29 30

[[26]]
[1] 26 27 28 29 30 31

[[27]]
[1] 27 28 29 30 31 32

[[28]]
[1] 28 29 30 31 32 33

[[29]]
[1] 29 30 31 32 33 34

[[30]]
[1] 30 31 32 33 34 35

[[31]]
[1] 31 32 33 34 35 36

[[32]]
[1] 32 33 34 35 36 37

[[33]]
[1] 33 34 35 36 37 38

[[34]]
[1] 34 35 36 37 38 39

[[35]]
[1] 35 36 37 38 39 40

> window_list(window_size = 6, length = 40, window_step = 2)
[[1]]
[1] 1 2 3 4 5 6

[[2]]
[1] 3 4 5 6 7 8

[[3]]
[1]  5  6  7  8  9 10

[[4]]
[1]  7  8  9 10 11 12

[[5]]
[1]  9 10 11 12 13 14

[[6]]
[1] 11 12 13 14 15 16

[[7]]
[1] 13 14 15 16 17 18

[[8]]
[1] 15 16 17 18 19 20

[[9]]
[1] 17 18 19 20 21 22

[[10]]
[1] 19 20 21 22 23 24

[[11]]
[1] 21 22 23 24 25 26

[[12]]
[1] 23 24 25 26 27 28

[[13]]
[1] 25 26 27 28 29 30

[[14]]
[1] 27 28 29 30 31 32

[[15]]
[1] 29 30 31 32 33 34

[[16]]
[1] 31 32 33 34 35 36

[[17]]
[1] 33 34 35 36 37 38

[[18]]
[1] 35 36 37 38 39 40

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("window_list", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("window_plot")
> ### * window_plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: window_plot
> ### Title: Generate a plot of FAVA in sliding windows.
> ### Aliases: window_plot
> 
> ### ** Examples
> 
> A = matrix(c(.3,.7,0,.1,0,.9,.2,.5,.3,.1,.8,.1,.3,.4,.3,.6,.4,0,0,.5,.5),
+            ncol = 3, byrow = TRUE)
> window_out = window_fava(relab_matrix = A, window_size = 4, normalized = TRUE)
> window_out$window_data
       FAVA window_index w1 w2 w3 w4
1 0.3645621            1  1  2  3  4
2 0.3354307            2  2  3  4  5
3 0.1408005            3  3  4  5  6
4 0.2052980            4  4  5  6  7
> window_out$window_plot
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("window_plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  35.19 2.25 37.63 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
